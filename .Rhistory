# donors
cohort_donor_year <- distinct(data_disaster, donor_code, donor_name, year) |>
mutate(cohort_donor = min(year, na.rm = T), .by = donor_code) |>
distinct(donor_code, donor_name, cohort_donor) |>
arrange(donor_name)
# recipients
cohort_recipient_year <- distinct(data_disaster, recipient_code, recipient_name, year) |>
mutate(cohort_recipient = min(year, na.rm = T), .by = recipient_code) |>
distinct(recipient_code, recipient_name, cohort_recipient) |>
arrange(recipient_name)
full_join(cohort_donor_year, cohort_recipient_year, by = c("donor_code" = "recipient_code")) |>
filter(!is.na(cohort_recipient) & !is.na(cohort_donor)) |>
select(donor_name)
target_pop_period_cohort <- left_join(target_pop_period, cohort_donor_year,
by = c("donor_code", "donor_name")) |>
left_join(cohort_recipient_year, by = c("recipient_code", "recipient_name"))
target_pop <- target_pop_period_cohort |>
mutate(dummy_universe = ifelse(year >= cohort_donor & year >= cohort_recipient, 1, 0))
target_pop |>
sample_n(5) |>
head()
target_pop <- target_pop |>
mutate(
id_actor = paste(donor_code, recipient_code, sep = "_"),
id = paste(id_actor, sector_code, year, sep = "_")
) |>
relocate(starts_with("id"), .before = year)
# convert to DT and set keys
setDT(target_pop, key = c("id_actor", "id"))
head(target_pop)
# data <- target_pop[, .(id_actor, year, dummy_universe)]
# panelView::panelview(1 ~ dummy_universe,
#                     data = data,
#                     index = c("id_actor","year"),
#                     type = "treat",
#                     xlab = "Year", ylab = "Dyad",
#                     legend.labs = c("NA", "R"),
#                     main = "Unbalanced panel data",
#                     gridOff = T, display.all = F,
#                    by.timing = T
#                    )
# Year-specific lists
data_disaster |>
summarize(Donors = n_distinct(donor_name),
Recipients = n_distinct(recipient_name),
.by = year) |>
pivot_longer(c("Donors", "Recipients"), names_to = "Actors", values_to = "Number") |>
ggplot(aes(x = year, y = Number, color = Actors)) +
geom_line() +
theme_minimal()
# remove unncessary objects
rm(data, data_clean, data_delivery, target_pop_period_cohort_donor, target_pop_period_cohort, target_pop_period)
# Sum of disb. per dyad-sector-year
setDT(data_disaster)
qty_dyad_sector_year <- copy(data_disaster)
qty_dyad_sector_year <- qty_dyad_sector_year[, .(
commitment = sum(usd_commitment_defl, na.rm = TRUE),
disbursement = sum(usd_disbursement_defl, na.rm = TRUE)),
by = .(donor_code, donor_name, recipient_code, recipient_name, sector_code, sector_name, year)
]
head(qty_dyad_sector_year)
qty_dyad_sector_year[, `:=` (
id_actor = paste(donor_code, recipient_code, sep = "_"),
id = paste(donor_code, recipient_code, sector_code, year, sep = "_")
)
]
qty_dyad_sector_year <- qty_dyad_sector_year |>
relocate(starts_with("id"), .before = donor_code)
setDT(qty_dyad_sector_year, key = c("id", "id_actor"))
# merge sum of disb to year-specific list of potential dyads
head(target_pop) # full sample
head(qty_dyad_sector_year) # aid flows
estimand <- merge(target_pop,
qty_dyad_sector_year |> select(id, commitment, disbursement),
by = "id",
all.x = TRUE) # rows from x which have no matching row in y are included
head(estimand)
estimand[!is.na(disbursement)]
# look at share of missing values
estimand |>
slice_sample(n = 1000) |>
vis_miss()
estimand <- estimand |>
mutate(across(c("commitment", "disbursement"), ~ ifelse(is.na(.x) & dummy_universe == 1, 0, .x)))
estimand |>
slice_sample(n = 1000) |>
vis_miss()
estimand <- estimand[, `:=` (
commit_xmarg = ifelse(commitment == 0 | is.na(commitment), 0, 1),
disb_xmarg = ifelse(disbursement == 0 | is.na(disbursement), 0, 1)
)]
head(estimand)
# two-way frequency table
table(data_disaster$channel_bypass, data_disaster$channel_bypass_ngo)
# merge sum of disb to year-specific list of potential dyads
head(target_pop) # full sample
head(qty_dyad_sector_year) # aid flows
estimand <- merge(target_pop,
qty_dyad_sector_year |> select(id, commitment, disbursement),
by = "id",
all.x = TRUE) # rows from x which have no matching row in y are included
head(estimand)
estimand[!is.na(disbursement)]
estimand <- estimand |>
mutate(across(c("commitment", "disbursement"), ~ ifelse(is.na(.x) & dummy_universe == 1, 0, .x)))
load(here('data', 'data_oecd_crs_raw.RData'))
data.table::fwrite(data_calibrated, here('data', 'data_calibrated.csv'))
data.table::fread(here('data', 'data_calibrated.csv'))
data_channel <- copy(data_calibrated)
# rename names and observations of vars related to the channel of delivery
data_channel.channel_parent_code <- data_channel |>
rename(channel_parent_code = parent_channel_code) |>
mutate(across(starts_with("channel") & ends_with('name'),
~ na_if( # replace "" by NA
str_squish( # delete space before/after character string
str_to_title(.x)),"")))  # harmonize style
# create new variable
data_channel.code_unique <- copy(data_channel.channel_parent_code)
data_channel.code_unique <- data_channel.code_unique[,
channel_code_unique := fifelse(
rowSums(!is.na(.SD)) == 2,
do.call(pmax, c(.SD, na.rm = TRUE)),
NA_real_
),
.SDcols = c("channel_code", "channel_parent_code")
]
# relocate vars related to the channel of delivery
data_channel.code_unique <- as_tibble(data_channel.code_unique) |>
relocate(c(channel_parent_code, channel_code, channel_code_unique, channel_name, channel_reported_name),
.after = sector_name)
setDT(data_channel.code_unique)
rm(data_calibrated, data_channel.channel_parent_code)
# create new variable
data_channel.channel_level <- copy(data_channel.code_unique)
data_channel.channel_level <- data_channel.channel_level |>
mutate(channel_level = case_when(
str_sub(channel_code_unique, -3) == "0000" | channel_code_unique == 51000 ~ 1,
str_sub(channel_code_unique, -3) == "000" ~ 2,
str_sub(channel_code_unique, -1) != 0 ~ 3,
)) |>
relocate(channel_level, .before = channel_parent_code)
data_channel <- copy(data_channel.channel_level)
rm(data_channel.code_unique, data_channel.channel_level)
# sample
data_channel |>
select(channel_level, channel_parent_code, channel_code_unique, channel_name) |>
filter(!is.na((channel_level))) |>
slice_sample(n = 2, by = channel_level) |>
head(3) |>
gt()
# import info from the crs code list
delivery_crs_code <- data.table(read_xlsx(here("docs", "OECD-ODA-Single-Table-2024-for-2023-flows.xlsx"),
sheet = "January 2024 table",
skip = 6
) |>
clean_names() |>
mutate_if(is.character,
.funs = ~ str_squish(str_to_title(.))
)) |>
select(channel_parent_code_2024 = channel_parent_category,
channel_code_2024 = channel_id,
channel_name_2024 = full_name_english)
# merge w/ data set
data_channel.delivery_crs_code <- left_join(data_channel, delivery_crs_code,
by = c('channel_code_unique' = 'channel_code_2024')) |>
relocate(channel_parent_code_2024, .after = channel_parent_code) |>
relocate(channel_name_2024, .after = channel_name)
data_channel <- copy(data_channel.delivery_crs_code)
rm(data_channel.delivery_crs_code)
data_channel <- data_channel.delivery_crs_code |>
mutate( # new provider variable bilateral/multilateral/private sector
bi_multi = case_when(
bi_multi %in% c(1, 2, 3, 7, 8) ~ 'Bilateral',
bi_multi == 4 ~ 'Multilateral',
bi_multi == 6 ~ 'Private Sector'
)
)
data_channel <- data_channel |>
mutate( # new provider variable bilateral/multilateral/private sector
bi_multi = case_when(
bi_multi %in% c(1, 2, 3, 7, 8) ~ 'Bilateral',
bi_multi == 4 ~ 'Multilateral',
bi_multi == 6 ~ 'Private Sector'
)
)
data_channel <- data_channel |>
mutate( # new agency var: proxy size w/ the sum of commitments per year
agency_size = sum(usd_commitment_defl, na.rm = T),
.by = c(donor_name, agency_name, year)
)
data_channel <- data_channel |>
mutate( # new variable combining donor and extending agency
donor_agency = paste0(donor_name," - ", agency_name))
data_channel <- data_channel |>
mutate(
channel_nonstate = fct(as.character((if_else(channel_parent_code_2024 %in% c(20000:63000), 1, 0)))),
channel_nonstate_ngo = fct(as.character((if_else(channel_parent_code_2024 %in% c(20000:23000), 1, 0)))),
channel_nonstate_multi = fct(as.character((if_else(channel_parent_code_2024 %in% c(40000:47000), 1, 0)))),
channel_nonstate_private = fct(as.character((if_else(channel_parent_code_2024 %in% c(60000:63000), 1, 0)))),
channel_other = fct(as.character((if_else(channel_parent_code_2024 == 90000, 1, 0))))
) |>
relocate(starts_with('channel_bypass'), .after = channel_name_2024)
data_channel <- data_channel |>
mutate(flow_modality = fct(case_when(
aid_t %in% c('A01', 'A02') ~ "Budget support",
aid_t %in% c('B01') ~ "Core contributions",
aid_t %in% c('B03', 'B031', 'B032', 'B033') ~ "Contributions to specific-purpose programmes/funds",
aid_t %in% c('B04') ~ "Basket funds/pooled funding",
aid_t %in% c('C01') ~ "Project-type interventions",
aid_t %in% c('D01') ~ "Donor country personnel",
aid_t %in% c('D02') ~ "Other technical assistance",
))) |>
relocate(flow_modality, .after = aid_t)
data_clean <- copy(data_channel)
save(data_clean, delivery_crs_code, file = here("data", "data_oecd_crs_clean.RData"))
rm(data_channel)
source(here::here('scripts', 'library.R'))
load(here('data', 'data_oecd_crs_clean.RData'))
load(here('data', 'data_emdat_clean.RData'))
data_disaster <- data_clean |>
mutate(
id_donor = sprintf("%04d", donor_code),
id_recipient = sprintf("%04d", recipient_code)
)
data_disaster <- data_disaster |>
filter(!grepl('regional', recipient_name))
# Unique, whole-period list
# donor-recipient-sector-year
target_pop_period <- data_disaster |>
expand(year, nesting(donor_code, donor_name), nesting(recipient_code, recipient_name), nesting(sector_code, sector_name))
# donors
cohort_donor_year <- distinct(data_disaster, donor_code, donor_name, year) |>
mutate(cohort_donor = min(year, na.rm = T), .by = donor_code) |>
distinct(donor_code, donor_name, cohort_donor) |>
arrange(donor_name)
# recipients
cohort_recipient_year <- distinct(data_disaster, recipient_code, recipient_name, year) |>
mutate(cohort_recipient = min(year, na.rm = T), .by = recipient_code) |>
distinct(recipient_code, recipient_name, cohort_recipient) |>
arrange(recipient_name)
full_join(cohort_donor_year, cohort_recipient_year, by = c("donor_code" = "recipient_code")) |>
filter(!is.na(cohort_recipient) & !is.na(cohort_donor)) |>
select(donor_name)
target_pop_period_cohort <- left_join(target_pop_period, cohort_donor_year,
by = c("donor_code", "donor_name")) |>
left_join(cohort_recipient_year, by = c("recipient_code", "recipient_name"))
target_pop <- target_pop_period_cohort |>
mutate(dummy_universe = ifelse(year >= cohort_donor & year >= cohort_recipient, 1, 0))
target_pop |>
sample_n(5) |>
head()
target_pop <- target_pop |>
mutate(
id_actor = paste(donor_code, recipient_code, sep = "_"),
id = paste(id_actor, sector_code, year, sep = "_")
) |>
relocate(starts_with("id"), .before = year)
# convert to DT and set keys
setDT(target_pop, key = c("id_actor", "id"))
head(target_pop)
# data <- target_pop[, .(id_actor, year, dummy_universe)]
# panelView::panelview(1 ~ dummy_universe,
#                     data = data,
#                     index = c("id_actor","year"),
#                     type = "treat",
#                     xlab = "Year", ylab = "Dyad",
#                     legend.labs = c("NA", "R"),
#                     main = "Unbalanced panel data",
#                     gridOff = T, display.all = F,
#                    by.timing = T
#                    )
# Year-specific lists
data_disaster |>
summarize(Donors = n_distinct(donor_name),
Recipients = n_distinct(recipient_name),
.by = year) |>
pivot_longer(c("Donors", "Recipients"), names_to = "Actors", values_to = "Number") |>
ggplot(aes(x = year, y = Number, color = Actors)) +
geom_line() +
theme_minimal()
# remove unncessary objects
rm(target_pop_period_cohort, target_pop_period)
# Sum of disb. per dyad-sector-year
setDT(data_disaster)
qty_dyad_sector_year <- copy(data_disaster)
qty_dyad_sector_year <- qty_dyad_sector_year[, .(
commitment = sum(usd_commitment_defl, na.rm = TRUE),
disbursement = sum(usd_disbursement_defl, na.rm = TRUE)),
by = .(donor_code, donor_name, recipient_code, recipient_name, sector_code, sector_name, year)
]
head(qty_dyad_sector_year)
qty_dyad_sector_year[, `:=` (
id_actor = paste(donor_code, recipient_code, sep = "_"),
id = paste(donor_code, recipient_code, sector_code, year, sep = "_")
)
]
qty_dyad_sector_year <- qty_dyad_sector_year |>
relocate(starts_with("id"), .before = donor_code)
setDT(qty_dyad_sector_year, key = c("id", "id_actor"))
# merge sum of disb to year-specific list of potential dyads
head(target_pop) # full sample
head(qty_dyad_sector_year) # aid flows
estimand <- merge(target_pop,
qty_dyad_sector_year |> select(id, commitment, disbursement),
by = "id",
all.x = TRUE) # rows from x which have no matching row in y are included
head(estimand)
estimand[!is.na(disbursement)]
# look at share of missing values
estimand |>
slice_sample(n = 1000) |>
vis_miss()
estimand <- estimand |>
mutate(across(c("commitment", "disbursement"), ~ ifelse(is.na(.x) & dummy_universe == 1, 0, .x)))
estimand |>
slice_sample(n = 1000) |>
vis_miss()
estimand <- estimand |>
mutate(
commit_xmarg = ifelse(commitment == 0 | is.na(commitment), 0, 1),
disb_xmarg = ifelse(disbursement == 0 | is.na(disbursement), 0, 1)
)
head(estimand)
# two-way frequency table
table(data_disaster$channel_nonstate, data_disaster$channel_nonstate_ngo)
table(data_disaster$channel_nonstate, data_disaster$channel_nonstate_multi)
table(data_disaster$channel_nonstate, data_disaster$channel_nonstate_private)
# create new channel-related vars: share of commitments going through nonstate, (nonstate) ngo, and other nonstate actors
mediator_dyad_sector_year <- copy(data_disaster)
mediator_dyad_sector_year <- mediator_dyad_sector_year[, .(
sh_nonstate = sum(usd_commitment_defl[channel_nonstate_ngo != "No"], na.rm = T) /
sum(usd_commitment_defl, na.rm = T),
sh_nonstate_ngo = sum(usd_commitment_defl[channel_nonstate_ngo == "Yes (NGO)"], na.rm = T) /
sum(usd_commitment_defl, na.rm = T),
sh_nonstate_multi = sum(usd_commitment_defl[channel_nonstate_multi == "Yes (Multi)"], na.rm = T) /
sum(usd_commitment_defl, na.rm = T),
sh_nonstate_private = sum(usd_commitment_defl[channel_nonstate_private == "Yes (Private)"], na.rm = T) /
sum(usd_commitment_defl, na.rm = T)
),
by = .(donor_code, donor_name, recipient_code, recipient_name, sector_code, sector_name, year)]
sample_n(mediator_dyad_sector_year, 5)
# validity check
# mediator_dyad_sector_year[sh_nonstate < 0, ]
# mediator_dyad_sector_year[sh_nonstate > 1, ]
summary(mediator_dyad_sector_year[, 8:11])
# missing data
mediator_dyad_sector_year |>
sample_n(1000) |>
vis_miss()
# observations with missing
mediator_dyad_sector_year |>
filter(is.na(sh_nonstate))
# missing data are due to observations with commitments valued as '0'
data_disaster |>
filter((donor_code == "0005" & recipient_code == "0228") & year == 2006)
# replace NaN to zeroes
mediator_dyad_sector_year <- mediator_dyad_sector_year |>
mutate(across(starts_with("sh_"), \(x) replace_na(x, 0)))
summary(mediator_dyad_sector_year[, 8:11])
mediator_dyad_sector_year |>
pivot_longer(-c(donor_code, donor_name, recipient_code, recipient_name, sector_code, sector_name, year),
names_to = "channel", values_to = "share") |>
ggplot(aes(x = share, color = channel)) +
geom_density() +
theme_minimal()
mediator <- mediator_dyad_sector_year |>
mutate(
channel_nonstate = ifelse(sh_nonstate > median(sh_nonstate, na.rm = T), 1, 0),
channel_nonstate_ngo = ifelse(sh_nonstate_ngo > median(sh_nonstate_ngo, na.rm = T), 1, 0),
channel_nonstate_multi = ifelse(sh_nonstate_multi > median(sh_nonstate_multi, na.rm = T), 1, 0),
channel_nonstate_private = ifelse(sh_nonstate_private > median(sh_nonstate_private, na.rm = T), 1, 0)
) |>
select(-c("sh_nonstate", "sh_nonstate_ngo", "sh_nonstate_multi", "sh_nonstate_private"))
sample_n(mediator, 5)
summary(mediator[, 8:11])
# unique identifiers (key)
mediator <- mediator |>
mutate(
id_actor = paste(donor_code, recipient_code, sep = "_"),
id = paste(id_actor, sector_code, year, sep = "_")
) |>
relocate(year, .before = donor_code) |>
relocate(starts_with("id"), .before = year)
setDT(mediator, key = c("id_actor", "id"))
head(mediator)
# merge
estimand_mediator <- merge(estimand,
mediator |> select(id, starts_with("channel_nonstate")),
all.x = TRUE)
head(estimand_mediator)
summary(estimand_mediator)
# replace NAs w/ zeroes when aid flows are zeroes (!= NAs)
estimand_mediator <- estimand_mediator |>
mutate(across(starts_with("channel"), \(x) ifelse(is.na(x) & dummy_universe == 1, replace_na(0), x)))
head(estimand_mediator)
setDT(em_dat)
# filter climate-related disasters only
event_clim_sample <-  em_dat[grepl('nat-cli-dro|nat-hyd-flo|nat-met-ext|nat-met-sto', classification_key)]
vis_dat(event_clim_sample)
vis_miss(event_clim_sample)
# create new vars
## event_n: number of event(s) per year in each country.
## call_n: number of event(s) per year in each country where international assistance was requested or a state of emergency was declared.
## appeal_n: number of event(s) per year in each country where international assistance was requested.
## declaration_n: number of event(s) per year in each country where a state of emergency was declared.
## event_cum: cumulative number of events in each country since 2002 (start year of the CRS data set)
treatment <- copy(em_dat)
treatment <- treatment[year >= 2002
][, .( # Number of events
event_n = .N,
call_n = sum(call == "Yes", na.rm = T),
appeal_n = sum(call_type == "Appeal", na.rm = T),
declaration_n = sum(call_type == "Declaration", na.rm = T)
),
by = .(country, iso, year)
][order(country, year)
][,`:=` ( # Cumulative number of events since 2002
event_cum = cumsum(event_n),
call_cum = cumsum(call_n),
appeal_cum = cumsum(appeal_n),
declaration_cum = cumsum(declaration_n)
),
by = .(country, iso)
]
# missing matching countries between both data sets
full_join(distinct(data_disaster, recipient_name),
distinct(em_dat, country),
by = c("recipient_name" = "country"),
keep = T) |>
arrange(country) |>
head()
left_join(distinct(data_disaster, recipient_name),
distinct(em_dat, country),
by = c("recipient_name" = "country"),
keep = T) |>
filter(is.na(country)) |>
arrange(recipient_name) |>
head()
right_join(distinct(data_disaster, recipient_name),
distinct(em_dat, country),
by = c("recipient_name" = "country"),
keep = T) |>
filter(is.na(recipient_name)) |>
arrange(country) |>
head()
# missing in em_dat / treatment data set: Nauru, Wallis and Futuna, Kosovo, Côte d'Ivoire, Tanzania, West Bank and Gaza Strip, China (People's Republic of), Bolivia, Venezuela, Iran, Micronesia, Mayotte
# first, we merge the iso variable from the treatment data set to the estimand data set.
estimand_mediator_iso <- left_join(estimand_mediator, distinct(em_dat, country, iso),
by = c("recipient_name" = "country")) |>
mutate(iso = case_when( # we add the missing ISO
recipient_name == "Côte d'Ivoire" ~ 'CIV',
recipient_name == "Moldova" ~ 'MDA',
recipient_name == "Tanzania" ~ 'TZA',
recipient_name == "China (People's Republic of)" ~ 'CHN',
recipient_name == "Bolivia" ~ 'BOL',
recipient_name == "Venezuela" ~ 'VEN',
recipient_name == "Iran" ~ 'IRN',
recipient_name == "Kosovo" ~ 'XKX',
recipient_name == "Mayotte" ~ 'MYT',
recipient_name == "Micronesia" ~ 'FSM',
recipient_name == "Nauru" ~ 'NRU',
recipient_name == "Wallis and Futuna" ~ 'WLF',
recipient_name == "West Bank and Gaza Strip" ~ 'PSE',
# we also add the ISO of three recipient countries with no observation in the em-dat (treatment) data set
recipient_name == "Equatorial Guinea" ~ 'GNQ',
recipient_name == "Montserrat" ~ 'MSR',
recipient_name == "Turkmenistan" ~ 'TKM',
.default = iso
)) |>
relocate(iso, .after = recipient_name)
# missing data
estimand_mediator_iso |>
sample_n(5000) |>
vis_miss()
estimand_mediator_treatment <- merge(estimand_mediator_iso, treatment[, !'country'],
by = c("iso", "year"), all.x = T) |>
select(-iso)
head(estimand_mediator_treatment)
# estimand_mediator_treatment |> filter(is.na(commitment) & !is.na(event_n))
rm(estimand_mediator_iso)
estimand_mediator_treatment <- estimand_mediator_treatment |>
mutate(across(event_n:declaration_cum, \(x) ifelse(is.na(x) & dummy_universe == 1, replace_na(0), x)))
estimand_mediator_treatment |> sample_n(1000) |> vis_miss()
estimand_mediator_treatment <- estimand_mediator_treatment |>
mutate(
switching_event_dummy = ifelse(event_n %in% c(0,NA), 0, 1),
switching_call_dummy = ifelse(call_n %in% c(0,NA), 0, 1),
switching_appeal_dummy = ifelse(appeal_n %in% c(0,NA), 0, 1),
switching_declaration_dummy = ifelse(declaration_n %in% c(0,NA), 0, 1),
single_event_dummy = ifelse(switching_event_dummy == 0 & event_cum == 0, 0, 1),
single_call_dummy = ifelse(switching_call_dummy == 0 & call_cum == 0, 0, 1),
single_appeal_dummy = ifelse(switching_appeal_dummy == 0 & appeal_cum == 0, 0, 1)
)
# cohort: year where the cumulative number of disasters is the lowest but different from zero
estimand_mediator_treatment <- estimand_mediator_treatment |>
mutate(
cohort_event = if_else(sum(event_cum, na.rm = T) == 0, NA_integer_, min(year[event_cum != 0], na.rm = T)),
cohort_call = if_else(sum(call_cum, na.rm = T) == 0, NA_integer_, min(year[call_cum != 0], na.rm = T)),
cohort_appeal = if_else(sum(appeal_cum, na.rm = T) == 0, NA_integer_, min(year[appeal_cum != 0], na.rm = T)),
cohort_declaration = if_else(sum(declaration_cum, na.rm = T) == 0, NA_integer_, min(year[declaration_cum != 0], na.rm = T)),
.by = recipient_code
)
# convert to factors
assignment <- mutate(estimand_mediator_treatment, across(ends_with('dummy'), as_factor))
# checks
distinct(data_disaster, donor_name)
distinct(assignment, donor_name)
distinct(data_disaster, recipient_name)
distinct(assignment, recipient_name)
assignment_universe <- copy(assignment)
assignment_universe <- assignment_universe[dummy_universe == 1] # rm obs where one of the actor where not registered in the crs data base at/before year t
save(assignment_universe, file = here("data", "assignment.RData"))
