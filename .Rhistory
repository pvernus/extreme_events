fsummarize(cohort_recipient = min(year, na.rm = T)) |>
ungroup()
# donors
cohort_donor_year <- data_channel |>
fgroup_by(donor_id, donor_name) |>
fsummarize(cohort_donor = min(year, na.rm = T)) |>
ungroup()
# recipients
cohort_recipient_year <- data_channel |>
fgroup_by(recipient_id, recipient_name) |>
fsummarize(cohort_recipient = min(year, na.rm = T)) |>
ungroup()
?merge
## merge
merge(data_channel, cohort_donor_year, by = "donor_id")
## merge
merge(data_channel, cohort_donor_year, by = "donor_id") |>
relocate(cohort_donor, .after = donor_name)
source(here::here('scripts', 'library.R'))
load(here("data", "data_emdat_raw.RData"))
data_emdat <- setDT(data_emdat_raw)
# restrict to events which have occurred since 2000
data_emdat <- data_emdat |>
filter(start_year >= 2000)
em_dat |>
count(start_year, disaster_subgroup) |>
ggplot(aes(x=start_year, y=n, fill=disaster_subgroup)) +
geom_bar(position="stack", stat="identity") +
geom_text(aes(label=n),
position = position_stack(vjust = 0.5),
size = 5, color = "white") +
theme(axis.text.y = element_blank()) +
theme_minimal() +
labs(x='Year', y='# Natural disasters', fill="Type")
source(here::here('scripts', 'library.R'))
load(here("data", "data_emdat_raw.RData"))
data_emdat <- setDT(data_emdat_raw)
# restrict to events which have occurred since 2000
data_emdat <- data_emdat |>
filter(start_year >= 2000)
data_emdat |>
count(start_year, disaster_subgroup) |>
ggplot(aes(x=start_year, y=n, fill=disaster_subgroup)) +
geom_bar(position="stack", stat="identity") +
geom_text(aes(label=n),
position = position_stack(vjust = 0.5),
size = 5, color = "white") +
theme(axis.text.y = element_blank()) +
theme_minimal() +
labs(x='Year', y='# Natural disasters', fill="Type")
data_emdat |>
count(start_year, disaster_subgroup) |>
mutate(pct = round(n / sum(n), 2), .by = start_year) |>
ggplot(aes(x=start_year, y=n, fill=disaster_subgroup)) +
geom_bar(position="fill", stat="identity") +
geom_text(aes(label = scales::percent(pct, accuracy = 1)),
position = position_fill(vjust = 0.5),
size = 3, color = "white") +
theme_minimal() +
theme(axis.text.y = element_blank()) +
labs(x='Year', y='', fill="Type")
summarize(data_emdat,
n_country = n_distinct(iso),
.by = c(start_year, region)) |>
ggplot(aes(x=start_year, y=n_country, fill=region)) +
geom_col() +
geom_text(aes(label = n_country),
position = position_stack(vjust = 0.5),
size = 3, color = "white") +
theme_minimal() +
theme(axis.text.y = element_blank()) +
labs(x='Year', y='# of countries',
title='Number of countries affected by a natural disaster')
data_emdat |>
count(start_year, country) |>
summarize(mean = mean(n, na.rm = T),
median = median(n, na.rm = T),
.by = start_year
) |>
pivot_longer(c(mean, median), names_to = 'stat', values_to = 'value') |>
ggplot(aes(x=start_year, y=value, color=stat)) +
geom_line() +
geom_point() +
expand_limits(y = 0) +
theme_minimal() +
theme(legend.position = 'bottom') +
labs(x='Year', y='# Natural disasters',
title='Annual number of natural disasters per country')
data_emdat |>
count(start_year, call) |>
ggplot(aes(x=start_year, y=n, fill=call)) +
geom_bar(position="stack", stat="identity") +
geom_text(aes(label=n),
position = position_stack(vjust = 0.5),
size = 5, color = "white") +
labs(x='Year', y='# Natural disasters',
fill="State of emergency | Request for international assistance") +
theme_minimal() +
theme(axis.text.y = element_blank(),
legend.position = "bottom")
load(here("data", "data_emdat_raw.RData"))
data_emdat <- setDT(data_emdat_raw)
source(here::here('scripts', 'library.R'))
load(here("data", "data_emdat_raw.RData"))
data_emdat <- setDT(data_emdat_raw)
# restrict to events which have occurred since 2000
data_emdat.start_year <- data_emdat |>
filter(start_year >= 2000)
# add dummy for weather and climate events
data_emdat.clim_event <- data_emdat.start_year |>
fmutate(clim_event = ifelse(grepl('nat-cli-dro|nat-hyd-flo|nat-met-ext|nat-met-sto', classification_key),1,0)) |>
relocate(clim_event, .after = classification_key)
# add vars on the number of events
data_emdat.count <- data_emdat.clim_event[, `:=` ( # Number of events per year
event_n = .N,
appeal_n = sum(appeal == "Yes", na.rm = T)
),
by = .(country, recipient_id, start_year, end_year)
][order(country, start_year)
][,`:=` ( # Cumulative number of events each year
event_cum = cumsum(event_n),
appeal_cum = cumsum(appeal_n)
),
by = .(country, recipient_id)
]
data_emdat.dummy <- data_emdat.count |>
fmutate(
switching_event_dummy = ifelse(event_n %in% c(0,NA), 0, 1),
switching_appeal_dummy = ifelse(appeal_n %in% c(0,NA), 0, 1),
single_event_dummy = ifelse(switching_event_dummy == 0 & event_cum == 0, 0, 1),
single_appeal_dummy = ifelse(switching_appeal_dummy == 0 & appeal_cum == 0, 0, 1)
)
data_emdat.cohort <- data_emdat.dummy |>
fmutate(
cohort_event = if_else(sum(event_cum, na.rm = T) == 0, NA_integer_, min(year[event_cum != 0], na.rm = T)),
cohort_call = if_else(sum(call_cum, na.rm = T) == 0, NA_integer_, min(year[call_cum != 0], na.rm = T)),
cohort_appeal = if_else(sum(appeal_cum, na.rm = T) == 0, NA_integer_, min(year[appeal_cum != 0], na.rm = T)),
cohort_declaration = if_else(sum(declaration_cum, na.rm = T) == 0, NA_integer_, min(year[declaration_cum != 0], na.rm = T)),
.by = recipient_code
)
data_emdat.dummy |>
fgroup_by(recipient_code) |>
fmutate(
cohort_event = if_else(sum(event_cum, na.rm = T) == 0, NA_integer_, min(year[event_cum != 0], na.rm = T)),
cohort_appeal = if_else(sum(appeal_cum, na.rm = T) == 0, NA_integer_, min(year[appeal_cum != 0], na.rm = T))
) |>
ungroup()
data_emdat.dummy |>
fgroup_by(recipient_id) |>
fmutate(
cohort_event = if_else(sum(event_cum, na.rm = T) == 0, NA_integer_, min(year[event_cum != 0], na.rm = T)),
cohort_appeal = if_else(sum(appeal_cum, na.rm = T) == 0, NA_integer_, min(year[appeal_cum != 0], na.rm = T))
) |>
ungroup()
data_emdat.dummy |>
fgroup_by(recipient_id)
data_emdat.dummy |>
fgroup_by(recipient_id) |>
fmutate(
cohort_event = if_else(sum(event_cum, na.rm = T) == 0, NA_integer_,
min(start_year[event_cum != 0], na.rm = T)),
cohort_appeal = if_else(sum(appeal_cum, na.rm = T) == 0, NA_integer_,
min(start_year[appeal_cum != 0], na.rm = T))
) |>
ungroup()
data_emdat.dummy |>
fgroup_by(recipient_id) |>
fmutate(
cohort_event = if_else(sum(event_n, na.rm = T) == 0, NA_integer_,
min(start_year[event_cum != 0], na.rm = T)),
cohort_appeal = if_else(sum(appeal_n, na.rm = T) == 0, NA_integer_,
min(start_year[appeal_cum != 0], na.rm = T))
) |>
ungroup()
data_emdat.dummy |>
fgroup_by(recipient_id) |>
fmutate(
cohort_event = if_else(sum(appeal_cum, na.rm = T) == 0, NA_integer_,
min(start_year[event_cum != 0], na.rm = T)),
cohort_appeal = if_else(sum(appeal_cum, na.rm = T) == 0, NA_integer_,
min(start_year[appeal_cum != 0], na.rm = T))
) |>
ungroup()
data_emdat.cohort <- data_emdat.dummy |>
fgroup_by(recipient_id) |>
fmutate(
cohort_event = if_else(sum(appeal_cum, na.rm = T) == 0, NA_integer_,
min(start_year[event_cum != 0], na.rm = T)),
cohort_appeal = if_else(sum(appeal_cum, na.rm = T) == 0, NA_integer_,
min(start_year[appeal_cum != 0], na.rm = T))
) |>
ungroup()
data_emdat <- copy(data_emdat.dummy)
save(data_emdat, file = here('data', 'data_emdat_clean.RData'))
rm(data_emdat_raw, data_emdat.start_year, data_emdat.dummy, data_emdat.count, data_emdat.cohort, data_emdat.clim_event)
data_emdat <- copy(data_emdat.dummy)
save(key_emdat, data_emdat, file = here('data', 'data_emdat_clean.RData'))
source(here::here('scripts', 'library.R'))
load(here("data", "data_oecd_crs_raw.RData"))
data_short <- data_oecd_crs_raw |>
select(1:26, 39, 44:54, 57:59, 62:67, 74:77, 78, 94:95) |> # select relevant vars
mutate_if(is.character, str_trim) # delete white space before/after text
setDT(data_short)
data_calibrated <- copy(data_short)
data_calibrated <- data_calibrated[!initial_report %in% c(2,5,9),
][!grepl("^[EH].*", aid_t),
][!grepl('unspecified', recipient_name),
][(!is.na(usd_commitment_defl) & !is.na(usd_disbursement_defl)) | (!is.na(usd_commitment_defl) & usd_disbursement_defl != 0) | (usd_commitment_defl != 0 & !is.na(usd_disbursement_defl)) | (!usd_commitment_defl != 0 & !usd_disbursement_defl != 0)]
# data_clean[duplicated(data_clean)|duplicated(data_clean, fromLast = TRUE),]
data_calibrated <- unique(data_calibrated)
data_channel <- copy(data_calibrated)
# rename names and observations of vars related to the channel of delivery
data_channel.channel_parent_code <- data_channel |>
rename(channel_parent_code = parent_channel_code) |>
fmutate(across(starts_with("channel") & ends_with('name'),
~ na_if( # replace "" by NA
str_squish( # delete space before/after character string
str_to_title(.x)),"")))  # harmonize style
data_channel |>
rename(channel_parent_code = parent_channel_code) |>
mutate(across(starts_with("channel") & ends_with('name'),
~ na_if( # replace "" by NA
str_squish( # delete space before/after character string
str_to_title(.x)),"")))
data_channel |>
rename(channel_parent_code = parent_channel_code) |>
mutate(starts_with("channel") & ends_with('name'),
~ na_if( # replace "" by NA
str_squish( # delete space before/after character string
str_to_title(.x)),""))
data_channel <- copy(data_calibrated)
# rename names and observations of vars related to the channel of delivery
data_channel.channel_parent_code <- data_channel |>
rename(channel_parent_code = parent_channel_code) |>
mutate(across(starts_with("channel") & ends_with('name'),
~ na_if( # replace "" by NA
str_squish( # delete space before/after character string
str_to_title(.x)),"")))  # harmonize style
# create new variable
data_channel.code_unique <- copy(data_channel.channel_parent_code)
data_channel.code_unique <- data_channel.code_unique[,
channel_code_unique := fifelse(
rowSums(!is.na(.SD)) == 2,
do.call(pmax, c(.SD, na.rm = TRUE)),
NA_real_
),
.SDcols = c("channel_code", "channel_parent_code")
]
# relocate vars related to the channel of delivery
data_channel.code_unique <- as_tibble(data_channel.code_unique) |>
relocate(c(channel_parent_code, channel_code, channel_code_unique, channel_name, channel_reported_name),
.after = sector_name)
setDT(data_channel.code_unique)
rm(data_channel.channel_parent_code)
# create new variable
data_channel.channel_level <- copy(data_channel.code_unique)
data_channel.channel_level <- data_channel.channel_level |>
fmutate(channel_level = case_when(
str_sub(channel_code_unique, -3) == "0000" | channel_code_unique == 51000 ~ 1,
str_sub(channel_code_unique, -3) == "000" ~ 2,
str_sub(channel_code_unique, -1) != 0 ~ 3,
)) |>
relocate(channel_level, .before = channel_parent_code)
data_channel <- copy(data_channel.channel_level)
rm(data_channel.code_unique, data_channel.channel_level)
# import info from the crs code list
delivery_crs_code <- data.table(read_xlsx(here("docs", "OECD-ODA-Single-Table-2024-for-2023-flows.xlsx"),
sheet = "January 2024 table",
skip = 6
) |>
clean_names() |>
mutate_if(is.character,
.funs = ~ str_squish(str_to_title(.))
)) |>
select(channel_parent_code_2024 = channel_parent_category,
channel_code_2024 = channel_id,
channel_name_2024 = full_name_english)
# merge w/ data set
data_channel.delivery_crs_code <- left_join(data_channel, delivery_crs_code,
by = c('channel_code_unique' = 'channel_code_2024')) |>
relocate(channel_parent_code_2024, .after = channel_parent_code) |>
relocate(channel_name_2024, .after = channel_name)
data_channel <- copy(data_channel.delivery_crs_code)
rm(data_channel.delivery_crs_code)
data_channel <- data_channel |>
fmutate( # new provider variable bilateral/multilateral/private sector
bi_multi = case_when(
bi_multi %in% c(1, 2, 3, 7, 8) ~ 'Bilateral',
bi_multi == 4 ~ 'Multilateral',
bi_multi == 6 ~ 'Private Sector'
)
)
data_channel <- data_channel |>
fmutate( # new agency var: proxy size w/ the sum of commitments per year
agency_size = sum(usd_commitment_defl, na.rm = T),
.by = c(donor_name, agency_name, year)
)
data_channel <- data_channel |>
fgroup_by(donor_name, agency_name, year) |>
fmutate( # new agency var: proxy size w/ the sum of commitments per year
agency_size = sum(usd_commitment_defl, na.rm = T)
)
data_channel <- data_channel |>
fmutate( # new variable combining donor and extending agency
donor_agency = paste0(donor_name," - ", agency_name))
data_channel <- data_channel |>
fmutate(
channel_nonstate = fct(as.character((if_else(channel_parent_code_2024 %in% c(20000:63000), 1, 0)))),
channel_nonstate_ngo = fct(as.character((if_else(channel_parent_code_2024 %in% c(20000:23000), 1, 0)))),
channel_nonstate_multi = fct(as.character((if_else(channel_parent_code_2024 %in% c(40000:47000), 1, 0)))),
channel_nonstate_private = fct(as.character((if_else(channel_parent_code_2024 %in% c(60000:63000), 1, 0)))),
channel_other = fct(as.character((if_else(channel_parent_code_2024 == 90000, 1, 0))))
) |>
relocate(channel_nonstate:channel_other, .after = channel_name_2024)
data_channel <- data_channel |>
fmutate(flow_modality = fct(case_when(
aid_t %in% c('A01', 'A02') ~ "Budget support",
aid_t %in% c('B01') ~ "Core contributions",
aid_t %in% c('B03', 'B031', 'B032', 'B033') ~ "Contributions to specific-purpose programmes/funds",
aid_t %in% c('B04') ~ "Basket funds/pooled funding",
aid_t %in% c('C01') ~ "Project-type interventions",
aid_t %in% c('D01') ~ "Donor country personnel",
aid_t %in% c('D02') ~ "Other technical assistance",
))) |>
relocate(flow_modality, .after = aid_t)
# create variable for the number of distinct projects by donor-recipient-sector-year unit
data_channel[, n_projects := uniqueN(crs_id), by = .(donor_id, recipient_id, sector_id)]
# Data is extracted from the OECD platform as text files.
# There is one text file per year between 2002 and 2022, except for 2002-03 and 2004-05.
# There are 19 files in total.
## LOAD PACKAGES
# NCmisc::list.functions.in.file(here("scripts", "key_crs.R"), alphabetic = TRUE)
if (!require("pacman")) install.packages("pacman")
pacman::p_load(
data.table,
dplyr,
here,
janitor
)
## IMPORT SOURCE DATA
# create path to folder w/ raw data
folder_path <- here('source', 'crs')
# create list of all files included in the folder
file_list <- list.files(path = folder_path, full.names = TRUE, pattern = '^CRS 2')
# create function to read the csv files
read_clean_and_process <- function(file_path) {
data <- fread(file_path) |>
clean_names() |> # clean variable names
mutate_if(is.character, str_trim) # delete white space before/after text
return(data)
}
## CREATE KEYS
# apply ad hoc function on all listed csv files in the folder
data_list <- lapply(file_list, read_clean_and_process)
# create a data.table
data_oecd_crs_raw <- rbindlist(data_list, fill = T)
# create ID variables
data_oecd_crs_raw <- data_oecd_crs_raw |>
fmutate(
donor_id = sprintf("%04d", donor_code),
recipient_id = sprintf("%04d", recipient_code),
sector_id = sprintf("%04d", sector_code)
)
# define key_donor
key_donor <- distinct(data_oecd_crs_raw, donor_id, donor_name)
# define key_recipient
key_recipient <- distinct(data_oecd_crs_raw, recipient_id, recipient_name)
# define key_sector
key_recipient <- distinct(data_oecd_crs_raw, sector_id, sector_name)
## SAVE
save(data_oecd_crs_raw, key_donor, key_recipient,
file = here("data", "data_oecd_crs_raw.RData"))
data_short <- data_oecd_crs_raw |>
select(1:26, 39, 44:54, 57:59, 62:67, 74:77, 78, 94:96) |> # select relevant vars
mutate_if(is.character, str_trim) # delete white space before/after text
look_for(data_oecd_crs_raw)
setDT(data_short)
data_calibrated <- copy(data_short)
data_calibrated <- data_calibrated[!initial_report %in% c(2,5,9),
][!grepl("^[EH].*", aid_t),
][!grepl('unspecified', recipient_name),
][(!is.na(usd_commitment_defl) & !is.na(usd_disbursement_defl)) | (!is.na(usd_commitment_defl) & usd_disbursement_defl != 0) | (usd_commitment_defl != 0 & !is.na(usd_disbursement_defl)) | (!usd_commitment_defl != 0 & !usd_disbursement_defl != 0)]
# data_clean[duplicated(data_clean)|duplicated(data_clean, fromLast = TRUE),]
data_calibrated <- unique(data_calibrated)
data_channel <- copy(data_calibrated)
# rename names and observations of vars related to the channel of delivery
data_channel.channel_parent_code <- data_channel |>
rename(channel_parent_code = parent_channel_code) |>
mutate(across(starts_with("channel") & ends_with('name'),
~ na_if( # replace "" by NA
str_squish( # delete space before/after character string
str_to_title(.x)),"")))  # harmonize style
# create new variable
data_channel.code_unique <- copy(data_channel.channel_parent_code)
data_channel.code_unique <- data_channel.code_unique[,
channel_code_unique := fifelse(
rowSums(!is.na(.SD)) == 2,
do.call(pmax, c(.SD, na.rm = TRUE)),
NA_real_
),
.SDcols = c("channel_code", "channel_parent_code")
]
# relocate vars related to the channel of delivery
data_channel.code_unique <- as_tibble(data_channel.code_unique) |>
relocate(c(channel_parent_code, channel_code, channel_code_unique, channel_name, channel_reported_name),
.after = sector_name)
setDT(data_channel.code_unique)
rm(data_channel.channel_parent_code)
# create new variable
data_channel.channel_level <- copy(data_channel.code_unique)
data_channel.channel_level <- data_channel.channel_level |>
fmutate(channel_level = case_when(
str_sub(channel_code_unique, -3) == "0000" | channel_code_unique == 51000 ~ 1,
str_sub(channel_code_unique, -3) == "000" ~ 2,
str_sub(channel_code_unique, -1) != 0 ~ 3,
)) |>
relocate(channel_level, .before = channel_parent_code)
data_channel <- copy(data_channel.channel_level)
rm(data_channel.code_unique, data_channel.channel_level)
# import info from the crs code list
delivery_crs_code <- data.table(read_xlsx(here("docs", "OECD-ODA-Single-Table-2024-for-2023-flows.xlsx"),
sheet = "January 2024 table",
skip = 6
) |>
clean_names() |>
mutate_if(is.character,
.funs = ~ str_squish(str_to_title(.))
)) |>
select(channel_parent_code_2024 = channel_parent_category,
channel_code_2024 = channel_id,
channel_name_2024 = full_name_english)
# merge w/ data set
data_channel.delivery_crs_code <- left_join(data_channel, delivery_crs_code,
by = c('channel_code_unique' = 'channel_code_2024')) |>
relocate(channel_parent_code_2024, .after = channel_parent_code) |>
relocate(channel_name_2024, .after = channel_name)
data_channel <- copy(data_channel.delivery_crs_code)
rm(data_channel.delivery_crs_code)
data_channel <- data_channel |>
fmutate( # new provider variable bilateral/multilateral/private sector
bi_multi = case_when(
bi_multi %in% c(1, 2, 3, 7, 8) ~ 'Bilateral',
bi_multi == 4 ~ 'Multilateral',
bi_multi == 6 ~ 'Private Sector'
)
)
data_channel <- data_channel |>
fgroup_by(donor_name, agency_name, year) |>
fmutate( # new agency var: proxy size w/ the sum of commitments per year
agency_size = sum(usd_commitment_defl, na.rm = T)
)
data_channel <- data_channel |>
fmutate( # new variable combining donor and extending agency
donor_agency = paste0(donor_name," - ", agency_name))
data_channel <- data_channel |>
fmutate(
channel_nonstate = fct(as.character((if_else(channel_parent_code_2024 %in% c(20000:63000), 1, 0)))),
channel_nonstate_ngo = fct(as.character((if_else(channel_parent_code_2024 %in% c(20000:23000), 1, 0)))),
channel_nonstate_multi = fct(as.character((if_else(channel_parent_code_2024 %in% c(40000:47000), 1, 0)))),
channel_nonstate_private = fct(as.character((if_else(channel_parent_code_2024 %in% c(60000:63000), 1, 0)))),
channel_other = fct(as.character((if_else(channel_parent_code_2024 == 90000, 1, 0))))
) |>
relocate(channel_nonstate:channel_other, .after = channel_name_2024)
data_channel <- data_channel |>
fmutate(flow_modality = fct(case_when(
aid_t %in% c('A01', 'A02') ~ "Budget support",
aid_t %in% c('B01') ~ "Core contributions",
aid_t %in% c('B03', 'B031', 'B032', 'B033') ~ "Contributions to specific-purpose programmes/funds",
aid_t %in% c('B04') ~ "Basket funds/pooled funding",
aid_t %in% c('C01') ~ "Project-type interventions",
aid_t %in% c('D01') ~ "Donor country personnel",
aid_t %in% c('D02') ~ "Other technical assistance",
))) |>
relocate(flow_modality, .after = aid_t)
# create variable for the number of distinct projects by donor-recipient-sector-year unit
data_channel[, n_projects := uniqueN(crs_id), by = .(donor_id, recipient_id, sector_id)]
## define cohorts
# donors
cohort_donor_year <- data_channel |>
fgroup_by(donor_id) |>
fsummarize(cohort_donor = min(year, na.rm = T)) |>
ungroup()
# recipients
cohort_recipient_year <- data_channel |>
fgroup_by(recipient_id) |>
fsummarize(cohort_recipient = min(year, na.rm = T)) |>
ungroup()
## merge
data_channel <- merge(data_channel, cohort_donor_year, by = "donor_id") |>
relocate(cohort_donor, .after = donor_name)
data_channel <- merge(data_channel, cohort_recipient_year, by = "recipient_id") |>
relocate(cohort_recipient, .after = recipient_name)
## create dummy for "true" zeroes
# i.e, no flow btw two actors even though both are registered in the CRS database
data_channel[dummy_universe := ifelse(year >= cohort_donor & year >= cohort_recipient, 1, 0)]
## create dummy for "true" zeroes
# i.e, no flow btw two actors even though both are registered in the CRS database
data_channel[, dummy_universe := ifelse(year >= cohort_donor & year >= cohort_recipient, 1, 0)]
View(data_channel)
# define key_recipient
key_recipient <- distinct(data_oecd_crs_raw, recipient_id, recipient_name)
# define key_sector
key_sector <- distinct(data_oecd_crs_raw, sector_id, sector_name)
## SAVE
save(data_oecd_crs_raw, key_donor, key_recipient, key_sector,
file = here("data", "data_oecd_crs_raw.RData"))
save(data_channel, delivery_crs_code,
file = here("data", "data_oecd_crs_clean.RData"))
look_for(data_channel)
data_channel <- data_channel |> ungroup()
look_for(data_channel)
setDt(data_channel)
