table(data_mediator$channel_nonstate_ngo, data_mediator$channel_nonstate_other)
merge(estimand, data_mediator,
by = c("donor_name", "recipient_name","year"),
all.x = TRUE)
estimand <- merge(target_pop_years, qty_dyad_year,
by = c("donor_name", "recipient_name","year"),
all.x = TRUE) # rows from x which have no matching row in y are included
# look at share of missing values
estimand |>
slice_sample(prop = .3) |>
vis_miss()
estimand[commitment == 0]
estimand[commitment == 0 & disbursement != 0]
estimand[commitment == 0 & disbursement != 0][order(disbursement)]
estimand[estimand == 0] <- NA # replace all zeroes to NA
estimand <- merge(target_pop_years, qty_dyad_year,
by = c("donor_name", "recipient_name","year"),
all.x = TRUE) # rows from x which have no matching row in y are included
estimand[is.na(estimand)] <- 0 # replace NAs by 0
estimand <- estimand[, c('commit_xmarg', 'disb_xmarg') := {
commit_xmarg <- ifelse(commitment != 0, 1, 0)
disb_xmarg <- ifelse(disbursement != 0, 1, 0)
list(commit_xmarg, disb_xmarg)
}]
head(estimand)
merge(estimand, data_mediator,
by = c("donor_name", "recipient_name","year"),
all.x = TRUE)
df[, `:=` (
channel_nonstate = ifelse(nonstate > mean(nonstate,na.rm = T), 1, 0),
channel_nonstate_ngo = ifelse(nonstate_ngo > mean(nonstate_ngo,na.rm = T), 1, 0),
channel_nonstate_other = ifelse(nonstate_other > mean(nonstate_other,na.rm = T), 1, 0)
)
][, startsWith(df, prefix = "nonstate"), with=FALSE][]
df[, `:=` (
channel_nonstate = ifelse(nonstate > mean(nonstate,na.rm = T), 1, 0),
channel_nonstate_ngo = ifelse(nonstate_ngo > mean(nonstate_ngo,na.rm = T), 1, 0),
channel_nonstate_other = ifelse(nonstate_other > mean(nonstate_other,na.rm = T), 1, 0)
)
][, c("nonstate", "nonstate_ngo", "nonstate_other"), with=FALSE][]
df[, `:=` (
channel_nonstate = ifelse(nonstate > mean(nonstate,na.rm = T), 1, 0),
channel_nonstate_ngo = ifelse(nonstate_ngo > mean(nonstate_ngo,na.rm = T), 1, 0),
channel_nonstate_other = ifelse(nonstate_other > mean(nonstate_other,na.rm = T), 1, 0)
)
][, c("nonstate", "nonstate_ngo", "nonstate_other"):=NULL][]
# create new channel-related vars: share of commitments going through nonstate, (nonstate) ngo, and other nonstate actors
df <- data_mediator[, .(
sh_nonstate = sum(usd_commitment_defl[channel_bypass_ngo != "No"], na.rm = T) / sum(usd_commitment_defl, na.rm = T),
sh_nonstate_ngo = sum(usd_commitment_defl[channel_bypass_ngo == "Yes (NGO)"], na.rm = T) / sum(usd_commitment_defl, na.rm = T),
sh_nonstate_other = sum(usd_commitment_defl[channel_bypass_ngo == "Yes (Other)"], na.rm = T) / sum(usd_commitment_defl, na.rm = T)
),
by = .(donor_code, donor_name, recipient_code, recipient_name, year)]
# convert char to factor
data_mediator <- data_disaster[, channel_bypass := as_factor(channel_bypass)]
# create new channel-related vars: share of commitments going through nonstate, (nonstate) ngo, and other nonstate actors
df <- data_mediator[, .(
sh_nonstate = sum(usd_commitment_defl[channel_bypass_ngo != "No"], na.rm = T) / sum(usd_commitment_defl, na.rm = T),
sh_nonstate_ngo = sum(usd_commitment_defl[channel_bypass_ngo == "Yes (NGO)"], na.rm = T) / sum(usd_commitment_defl, na.rm = T),
sh_nonstate_other = sum(usd_commitment_defl[channel_bypass_ngo == "Yes (Other)"], na.rm = T) / sum(usd_commitment_defl, na.rm = T)
),
by = .(donor_code, donor_name, recipient_code, recipient_name, year)]
df[, `:=` (
channel_nonstate = ifelse(sh_nonstate > mean(sh_nonstate,na.rm = T), 1, 0),
channel_nonstate_ngo = ifelse(sh_nonstate_ngo > mean(sh_nonstate_ngo,na.rm = T), 1, 0),
channel_nonstate_other = ifelse(sh_nonstate_other > mean(sh_nonstate_other,na.rm = T), 1, 0)
)
][, c("nonstate", "nonstate_ngo", "nonstate_other"):=NULL][]
df[, `:=` (
channel_nonstate = ifelse(sh_nonstate > mean(sh_nonstate,na.rm = T), 1, 0),
channel_nonstate_ngo = ifelse(sh_nonstate_ngo > mean(sh_nonstate_ngo,na.rm = T), 1, 0),
channel_nonstate_other = ifelse(sh_nonstate_other > mean(sh_nonstate_other,na.rm = T), 1, 0)
)
][, c("sh_nonstate", "sh_nonstate_ngo", "sh_nonstate_other"):=NULL][]
data_mediator <- df[, `:=` (
channel_nonstate = ifelse(sh_nonstate > mean(sh_nonstate,na.rm = T), 1, 0),
channel_nonstate_ngo = ifelse(sh_nonstate_ngo > mean(sh_nonstate_ngo,na.rm = T), 1, 0),
channel_nonstate_other = ifelse(sh_nonstate_other > mean(sh_nonstate_other,na.rm = T), 1, 0)
)
][, c("sh_nonstate", "sh_nonstate_ngo", "sh_nonstate_other"):=NULL]
# convert char to factor
data_mediator <- data_disaster[, channel_bypass := as_factor(channel_bypass)]
# two-way frequency table
# table(data_mediator$channel_bypass, data_mediator$channel_bypass_ngo)
# create new channel-related vars: share of commitments going through nonstate, (nonstate) ngo, and other nonstate actors
df <- data_mediator[, .(
sh_nonstate = sum(usd_commitment_defl[channel_bypass_ngo != "No"], na.rm = T) / sum(usd_commitment_defl, na.rm = T),
sh_nonstate_ngo = sum(usd_commitment_defl[channel_bypass_ngo == "Yes (NGO)"], na.rm = T) / sum(usd_commitment_defl, na.rm = T),
sh_nonstate_other = sum(usd_commitment_defl[channel_bypass_ngo == "Yes (Other)"], na.rm = T) / sum(usd_commitment_defl, na.rm = T)
),
by = .(donor_code, donor_name, recipient_code, recipient_name, year)]
data_mediator <- df[, `:=` (
channel_nonstate = ifelse(sh_nonstate > mean(sh_nonstate,na.rm = T), 1, 0),
channel_nonstate_ngo = ifelse(sh_nonstate_ngo > mean(sh_nonstate_ngo,na.rm = T), 1, 0),
channel_nonstate_other = ifelse(sh_nonstate_other > mean(sh_nonstate_other,na.rm = T), 1, 0)
)
][, c("sh_nonstate", "sh_nonstate_ngo", "sh_nonstate_other"):=NULL]
# table(data_mediator$channel_nonstate_ngo, data_mediator$channel_nonstate_other)
rm(df)
merge(estimand, data_mediator,
by = c("donor_name", "recipient_name","year"),
all.x = TRUE)
# Year-specific lists
merge(target_pop_years |> count(year),
data_disaster[bi_multi %in% c(1,3,7,8),  # filter for bilateral providers only
CJ(donor_name, recipient_name, unique = TRUE), by = year] |>
count(year),
by = 'year') |>
rename(All = n.x, Bilaterals = n.y) |>
pivot_longer(-year, names_to = "Providers", values_to = "value") |>
ggplot(aes(x=year, y=value, color=Providers)) +
geom_line() +
theme_minimal() +
labs(x='', y='# dyads', title = 'Trend in the number of potential dyads each year')
# Unique, whole-period list
target_pop_period <- data_disaster[, CJ(year, donor_code, donor_name, recipient_code, recipient_name, unique = TRUE)]
# Unique, whole-period list
target_pop_period |>
count(year) |>
head()
data_disaster[bi_multi %in% c(1,3,7,8), # filter for bilateral providers only
CJ(year, donor_name, recipient_name, unique = TRUE)] |>
count(year) |>
head()
data_delivery[!grepl('regional', recipient_name)]
data_disaster[, CJ(year, donor_name, recipient_name, unique = TRUE)]
data_disaster[, CJ(donor_name, recipient_name, unique = TRUE), by = year]
# Unique, whole-period list
target_pop_period |>
count(year) |>
head()
data_disaster[bi_multi %in% c(1,3,7,8), # filter for bilateral providers only
CJ(year, donor_name, recipient_name, unique = TRUE)] |>
count(year) |>
head()
target_pop_period[bi_multi %in% c(1,3,7,8), # filter for bilateral providers only
CJ(year, donor_name, recipient_name, unique = TRUE)] |>
count(year) |>
head()
data[bi_multi %in% c(1,3,7,8), # filter for bilateral providers only
CJ(year, donor_name, recipient_name, unique = TRUE)] |>
count(year) |>
head()
data[bi_multi %in% c(1,3,7,8),]
estimand_mediator <- merge(estimand, data_mediator,
by = c("donor_name", "recipient_name","year"),
all.x = TRUE)
estimand_mediator[is.na(estimand_mediator)] <- 0
estimand_mediator
setDT(em_dat)
# filter climate-related disasters only
event_clim_sample <-  em_dat[grepl('nat-cli-dro|nat-hyd-flo|nat-met-ext|nat-met-sto', classification_key)]
vis_dat(event_clim_sample)
vis_miss(event_clim_sample)
# create new vars
## event_n: number of event(s) per year in each country.
## call_n: number of event(s) per year in each country where international assistance was requested or a state of emergency was declared.
## appeal_n: number of event(s) per year in each country where international assistance was requested.
## declaration_n: number of event(s) per year in each country where a state of emergency was declared.
## event_cum: cumulative number of events in each country since 2002 (start year of the CRS data set)
treatment <- event_clim_sample[year >= 2002
][, .( # Number of events
event_n = .N,
call_n = sum(call == "Yes"),
appeal_n = sum(call_type == "Appeal"),
declaration_n = sum(call_type == "Declaration")
),
by = .(country, iso, year)
][order(country, year)
][,`:=` ( # Cumulative number of events since 2002
event_cum = cumsum(event_n),
call_cum = cumsum(call_n),
appeal_cum = cumsum(appeal_n),
declaration_cum = cumsum(declaration_n)
),
by = .(country, iso)
]
full_join(distinct(data_disaster, recipient_name),
distinct(em_dat, country),
by = c("recipient_name" = "country"),
keep = T) |>
arrange(country)
# missing in em_dat / treatment data set: Nauru, Wallis and Futuna, Kosovo, Côte d'Ivoire, Tanzania, West Bank and Gaza Strip, China (People's Republic of), Bolivia, Venezuela, Iran, Micronesia, Mayotte
# first, we merge the iso variable from the treatment data set to the estimand data set.
estimand_mediator <- left_join(estimand_mediator, distinct(em_dat, country, iso),
by = c("recipient_name" = "country")) |>
mutate(iso = case_when( # we add the missing ISO
recipient_name == "Côte d'Ivoire" ~ 'CIV',
recipient_name == "Moldova" ~ 'MDA',
recipient_name == "Tanzania" ~ 'TZA',
recipient_name == "China (People's Republic of)" ~ 'CHN',
recipient_name == "Bolivia" ~ 'BOL',
recipient_name == "Venezuela" ~ 'VEN',
recipient_name == "Iran" ~ 'IRN',
recipient_name == "Kosovo" ~ 'XKX',
recipient_name == "Mayotte" ~ 'MYT',
recipient_name == "Micronesia" ~ 'FSM',
recipient_name == "Nauru" ~ 'NRU',
recipient_name == "Wallis and Futuna" ~ 'WLF',
recipient_name == "West Bank and Gaza Strip" ~ 'PSE',
# we also add the ISO of three recipient countries with no observation in the em-dat (treatment) data set
recipient_name == "Equatorial Guinea" ~ 'GNQ',
recipient_name == "Montserrat" ~ 'MSR',
recipient_name == "Turkmenistan" ~ 'TKM',
.default = iso
)) |>
relocate(iso, .after = recipient_name)
# second, we merge the estimand and treatment data sets
assignment <- merge(estimand_mediator, treatment[, !'country'], by = c("iso", "year"), all.x = T)
setDT(assignment)
assignment[order(recipient_name, year)]
full_join(distinct(data_disaster, recipient_name),
distinct(em_dat, country),
by = c("recipient_name" = "country"),
keep = T) |>
arrange(country)
head(assignment)
assignment |>
filter(is.na(event_n))
assignment |>
slice_sample(prop = .2) |>
#  vis_dat()
vis_miss()
assignment[is.na(assignment)] <- 0 # replace NAs by 0
assignment |>
slice_sample(prop = .3) |>
vis_miss()
assignment |>
slice_sample(prop = .2) |>
vis_miss()
assignment[, c("event_binary", "call_binary", "appeal_binary", "declaration_binary") :=
.(
ifelse(event_n %in% c(0,NA), 0, 1),
ifelse(call_n %in% c(0,NA), 0, 1),
ifelse(appeal_n %in% c(0,NA), 0, 1),
ifelse(declaration_n %in% c(0,NA), 0, 1)
)
]
# cohort: year where the cumulative number of disasters is the lowest but different from zero.
assignment[, c("cohort_event", "cohort_call", "cohort_appeal", "cohort_declaration") := .(
ifelse(sum(event_n, na.rm = T) == 0, NA_integer_, min(year[event_cum != 0])),
ifelse(sum(call_n, na.rm = T) == 0, NA_integer_, min(year[call_cum != 0])),
ifelse(sum(appeal_n, na.rm = T) == 0, NA_integer_, min(year[appeal_cum != 0])),
ifelse(sum(declaration_n, na.rm = T) == 0, NA_integer_, min(year[declaration_cum != 0]))
), by = .(recipient_name, iso)]
assignment[, key := .GRP, by = .(donor_name, recipient_name)]
assignment[, key := .GRP, by = .(donor_name, recipient_name, year)]
?relocate
assignment |> relocate(key, .before = iso)
assignment <- mutate(assignment, across(ends_with('binary'), as_factor))
ggplot(assignment, aes(x = commitment)) +
geom_density()
ggplot(assignment, aes(x = commitment)) +
geom_density() +
theme_minimal()
ggplot(assignment, aes(x = log(commitment))) +
geom_density() +
theme_minimal()
summary(assignment[,"assignment"])
summary(assignment[,names("commitment")])
summary(assignment[, commitment])
ggplot(assignment, aes(x = log(commitment))) +
geom_density() +
theme_minimal()
ggplot(assignment, aes(x = commitment)) +
geom_density() +
theme_minimal()
summary(assignment[, c(commitment, disbursement, commit_xmarg, disb_xmarg)])
summary(assignment[, c(commitment, disbursement, commit_xmarg, disb_xmarg)])
assignment |>
select(commitment, disbursement, commit_xmarg, disb_xmarg) |>
summary()
# mediator
assignment |>
select(startsWith("channel")) |>
summary()
# mediator
assignment |>
select(starts_with("channel")) |>
summary()
# treatment
assignment |>
select(event_n:declaration_binary) |>
summary()
summarize(assignment,
disb = sum(commitment, na.rm = T),
.by = c(recipient_name, year, event_binary)) |>
ggplot(aes(x = event_binary, y = log(disb), colour = event_binary)) +
geom_boxplot() +
theme_minimal() +
theme(legend.position = "none") +
labs(x="Treatment", y=" (log)",
title = "Yearly s to recipient countries",
subtitle = "Treatment: at least one climate-related disaster recorded during the year")
summarize(assignment,
disb = sum(commitment, na.rm = T),
.by = c(recipient_name, year, call_binary)) |>
ggplot(aes(x = event_binary, y = log(disb), colour = event_binary)) +
geom_boxplot() +
theme_minimal() +
theme(legend.position = "none") +
labs(x="Treatment", y=" Commitment, MUSD (log)",
title = "Yearly commitments to recipient countries",
subtitle = "Treatment: at least one climate-related call-reported disaster recorded during the year")
summarize(assignment,
disb = sum(commitment, na.rm = T),
.by = c(recipient_name, year, call_binary)) |>
ggplot(aes(x = call_binary, y = log(disb), colour = call_binary)) +
geom_boxplot() +
theme_minimal() +
theme(legend.position = "none") +
labs(x="Treatment", y=" Commitment, MUSD (log)",
title = "Yearly commitments to recipient countries",
subtitle = "Treatment: at least one climate-related call-reported disaster recorded during the year")
# appeal disaster
summarize(assignment,
disb = sum(commitment, na.rm = T),
.by = c(recipient_name, year, appeal_binary)) |>
ggplot(aes(x = appeal_binary, y = log(disb), colour = appeal_binary)) +
geom_boxplot() +
theme_minimal() +
theme(legend.position = "none") +
labs(x="Treatment", y=" Commitment, MUSD (log)",
title = "Yearly commitments to recipient countries",
subtitle = "Treatment: at least one climate-related appeal-reported disaster recorded during the year")
summarize(assignment,
disb = sum(commitment, na.rm = T),
.by = c(recipient_name, year, event_binary)) |>
ggbetweenstats(
x = event_binary,
y = log(disb)
)
summarize(assignment,
disb = sum(commitment, na.rm = T),
.by = c(recipient_name, year, event_binary))
summarize(assignment,
disb = log(sum(commitment, na.rm = T)),
.by = c(recipient_name, year, event_binary)) |>
ggbetweenstats(
x = event_binary,
y = disb
)
# missing matching countries between both data sets
full_join(distinct(data_disaster, recipient_name),
distinct(em_dat, country),
by = c("recipient_name" = "country"),
keep = T) |>
arrange(country)
# missing in em_dat / treatment data set: Nauru, Wallis and Futuna, Kosovo, Côte d'Ivoire, Tanzania, West Bank and Gaza Strip, China (People's Republic of), Bolivia, Venezuela, Iran, Micronesia, Mayotte
# first, we merge the iso variable from the treatment data set to the estimand data set.
estimand_mediator <- left_join(estimand_mediator, distinct(em_dat, country, iso),
by = c("recipient_name" = "country")) |>
mutate(iso = case_when( # we add the missing ISO
recipient_name == "Côte d'Ivoire" ~ 'CIV',
recipient_name == "Moldova" ~ 'MDA',
recipient_name == "Tanzania" ~ 'TZA',
recipient_name == "China (People's Republic of)" ~ 'CHN',
recipient_name == "Bolivia" ~ 'BOL',
recipient_name == "Venezuela" ~ 'VEN',
recipient_name == "Iran" ~ 'IRN',
recipient_name == "Kosovo" ~ 'XKX',
recipient_name == "Mayotte" ~ 'MYT',
recipient_name == "Micronesia" ~ 'FSM',
recipient_name == "Nauru" ~ 'NRU',
recipient_name == "Wallis and Futuna" ~ 'WLF',
recipient_name == "West Bank and Gaza Strip" ~ 'PSE',
# we also add the ISO of three recipient countries with no observation in the em-dat (treatment) data set
recipient_name == "Equatorial Guinea" ~ 'GNQ',
recipient_name == "Montserrat" ~ 'MSR',
recipient_name == "Turkmenistan" ~ 'TKM',
.default = iso
)) |>
relocate(iso, .after = recipient_name)
estimand_mediator <- merge(estimand, data_mediator,
by = c("donor_name", "recipient_name","year"),
all.x = TRUE)
estimand_mediator[is.na(estimand_mediator)] <- 0
# first, we merge the iso variable from the treatment data set to the estimand data set.
estimand_mediator <- left_join(estimand_mediator, distinct(em_dat, country, iso),
by = c("recipient_name" = "country")) |>
mutate(iso = case_when( # we add the missing ISO
recipient_name == "Côte d'Ivoire" ~ 'CIV',
recipient_name == "Moldova" ~ 'MDA',
recipient_name == "Tanzania" ~ 'TZA',
recipient_name == "China (People's Republic of)" ~ 'CHN',
recipient_name == "Bolivia" ~ 'BOL',
recipient_name == "Venezuela" ~ 'VEN',
recipient_name == "Iran" ~ 'IRN',
recipient_name == "Kosovo" ~ 'XKX',
recipient_name == "Mayotte" ~ 'MYT',
recipient_name == "Micronesia" ~ 'FSM',
recipient_name == "Nauru" ~ 'NRU',
recipient_name == "Wallis and Futuna" ~ 'WLF',
recipient_name == "West Bank and Gaza Strip" ~ 'PSE',
# we also add the ISO of three recipient countries with no observation in the em-dat (treatment) data set
recipient_name == "Equatorial Guinea" ~ 'GNQ',
recipient_name == "Montserrat" ~ 'MSR',
recipient_name == "Turkmenistan" ~ 'TKM',
.default = iso
)) |>
relocate(iso, .after = recipient_name)
# second, we merge the estimand and treatment data sets
assignment <- merge(estimand_mediator, treatment[, !'country'], by = c("iso", "year"), all.x = T)
setDT(assignment)
assignment[order(recipient_name, year)]
assignment[is.na(assignment)] <- 0 # replace NAs by 0
# assignment |> slice_sample(prop = .2) |> vis_miss() # check
assignment[, c("event_binary", "call_binary", "appeal_binary", "declaration_binary") :=
.(
ifelse(event_n %in% c(0,NA), 0, 1),
ifelse(call_n %in% c(0,NA), 0, 1),
ifelse(appeal_n %in% c(0,NA), 0, 1),
ifelse(declaration_n %in% c(0,NA), 0, 1)
)
]
# cohort: year where the cumulative number of disasters is the lowest but different from zero.
assignment[, c("cohort_event", "cohort_call", "cohort_appeal", "cohort_declaration") := .(
ifelse(sum(event_n, na.rm = T) == 0, NA_integer_, min(year[event_cum != 0])),
ifelse(sum(call_n, na.rm = T) == 0, NA_integer_, min(year[call_cum != 0])),
ifelse(sum(appeal_n, na.rm = T) == 0, NA_integer_, min(year[appeal_cum != 0])),
ifelse(sum(declaration_n, na.rm = T) == 0, NA_integer_, min(year[declaration_cum != 0]))
), by = .(recipient_name, iso)]
# convert to factors
assignment <- mutate(assignment, across(ends_with('binary'), as_factor))
assignment[, key := .GRP, by = .(donor_name, recipient_name)]
assignment <- assignment |> relocate(key, .before = iso)
setcolorder(assignment, c("key", "iso", setdiff(names(assignment), c("key", "iso"))))
# outcome
assignment |>
select(commitment, disbursement, commit_xmarg, disb_xmarg) |>
summary()
# mediator
assignment |>
select(starts_with("channel")) |>
summary()
# treatment
assignment |>
select(event_n:declaration_binary) |>
summary()
panelView::panelview(commit_xmarg ~ event_binary,
data = assignment,
index = c("key","year"),
type = "treat",
xlab = "Year", ylab = "State")
panelView::panelview(commit_xmarg ~ as_numeric(event_binary),
data = assignment,
index = c("key","year"),
type = "treat",
xlab = "Year", ylab = "State")
panelView::panelview(commit_xmarg ~ as.numeric(event_binary),
data = assignment,
index = c("key","year"),
type = "treat",
xlab = "Year", ylab = "State")
panelView::panelview(commit_xmarg ~ as.numeric(event_binary),
data = assignment,
index = c("key","year"),
type = "missing",
xlab = "Year", ylab = "State")
panelView::panelview(commit_xmarg ~ event_binary,
data = assignment,
index = c("key","year"),
type = "missing",
xlab = "Year", ylab = "State")
panelView::panelview(commit_xmarg ~ 1,
data = assignment,
index = c("key","year"),
type = "missing",
xlab = "Year", ylab = "Dyad")
data("panelView")
library(panelView)
data("panelView")
View(turnout)
assignment <- mutate(assignment, across(ends_with('binary'), as.numeric()))
assignment <- mutate(assignment, across(ends_with('binary'), as.numeric))
panelView::panelview(commit_xmarg ~ 1,
data = assignment,
index = c("key","year"),
type = "missing",
xlab = "Year", ylab = "Dyad")
panelview(turnout ~ 1,
data = turnout,
index = c("abb","year"),
type = "missing",
xlab = "Year", ylab = "State")
assignment |>
select(as_character(key), year, commit_xmarg, event_binary)
assignment |>
select(as.character(key), year, commit_xmarg, event_binary)
assignment |>
select(key = as.character(key), year, commit_xmarg, event_binary)
assignment |>
select(key, year, commit_xmarg, event_binary)
panelView::panelview(commit_xmarg ~ 1,
data = df,
index = c("key","year"),
type = "missing",
xlab = "Year", ylab = "Dyad")
df <- assignment |>
select(key, year, commit_xmarg, event_binary)
panelView::panelview(commit_xmarg ~ 1,
data = df,
index = c("key","year"),
type = "missing",
xlab = "Year", ylab = "Dyad")
?panelView
n_distinct(turnout$abb, turnout$year)
turnout |> tabyl(abb, year)
assignment |> tabyl(key, year)
View(assignment)
View(df)
df |> arrange(key, year) |> view()
