setDT(data_clean)
qty_dyad_year <- data_clean[, .(
commitment = sum(usd_commitment_defl, na.rm = TRUE),
disbursement = sum(usd_disbursement_defl, na.rm = TRUE)),
by = .(donor_name, recipient_name, year)]
# merge sum of disb to year-specific list of potential dyads
head(target_pop_years)
head(qty_dyad_year)
estimand <- merge(target_pop_years, qty_dyad_year,
by = c("donor_name", "recipient_name","year"),
all.x = TRUE) # rows from x which have no matching row in y are included
head(estimand)
# look at share of missing values
estimand |>
slice_sample(prop = .3) |>
vis_miss()
estimand[is.na(estimand)] <- 0 # replace NAs by 0
estimand <- estimand[, c('commit_xmarg', 'disb_xmarg') := {
commit_xmarg <- ifelse(commitment != 0, 1, 0)
disb_xmarg <- ifelse(disbursement != 0, 1, 0)
list(commit_xmarg, disb_xmarg)
}]
head(estimand)
sorted_estimand <- estimand[order(donor_name, recipient_name, year)]
sorted_estimand[, c("diff_abs", "diff_prop") := {
diff_abs <- commitment - shift(commitment)
diff_prop <- (commitment - shift(commitment)) / shift(commitment)
list(diff_abs, diff_prop)
},
by = .(donor_name, recipient_name)]
setDT(em_dat)
# filter climate-related disasters only
event_clim_sample <-  em_dat[grepl('nat-cli-dro|nat-hyd-flo|nat-met-ext|nat-met-sto', classification_key)]
vis_dat(event_clim_sample)
vis_miss(event_clim_sample)
# create new vars
## event_n: number of event(s) per year in each country.
## call_n: number of event(s) per year in each country where international assistance was requested or a state of emergency was declared.
## appeal_n: number of event(s) per year in each country where international assistance was requested.
## declaration_n: number of event(s) per year in each country where a state of emergency was declared.
## event_cum: cumulative number of events in each country since 2002 (start year of the CRS data set)
treatment <- event_clim_sample[year >= 2002
][, .( # Number of events
event_n = .N,
call_n = sum(call == "Yes"),
appeal_n = sum(call_type == "Appeal"),
declaration_n = sum(call_type == "Declaration")
),
by = .(country, iso, year)
][order(country, year)
][,`:=` ( # Cumulative number of events since 2002
event_cum = cumsum(event_n),
call_cum = cumsum(call_n),
appeal_cum = cumsum(appeal_n),
declaration_cum = cumsum(declaration_n)
),
by = .(country, iso)
]
full_join(distinct(data_clean, recipient_name),
distinct(em_dat, country),
by = c("recipient_name" = "country"),
keep = T) |>
arrange(recipient_name)
# missing in em_dat / treatment data set: Nauru, Wallis and Futuna, Kosovo, Côte d'Ivoire, Tanzania, West Bank and Gaza Strip, China (People's Republic of), Bolivia, Venezuela, Iran, Micronesia, Mayotte
# first, we merge the iso variable from the treatment data set to the estimand data set.
estimand <- left_join(estimand, distinct(treatment, country, iso), by = c("recipient_name" = "country")) |>
mutate(iso = case_when( # we add the missing ISO
recipient_name == "Côte d'Ivoire" ~ 'CIV',
recipient_name == "Moldova" ~ 'MDA',
recipient_name == "Tanzania" ~ 'TZA',
recipient_name == "China (People's Republic of)" ~ 'CHN',
recipient_name == "Bolivia" ~ 'BOL',
recipient_name == "Venezuela" ~ 'VEN',
recipient_name == "Iran" ~ 'IRN',
recipient_name == "Kosovo" ~ 'XKX',
recipient_name == "Mayotte" ~ 'MYT',
recipient_name == "Micronesia" ~ 'FSM',
recipient_name == "Nauru" ~ 'NRU',
recipient_name == "Wallis and Futuna" ~ 'WLF',
recipient_name == "West Bank and Gaza Strip" ~ 'PSE',
# we also add the ISO of three recipient countries with no observation in the em-dat (treatment) data set
recipient_name == "Equatorial Guinea" ~ 'GNQ',
recipient_name == "Montserrat" ~ 'MSR',
recipient_name == "Turkmenistan" ~ 'TKM',
.default = iso
)) |>
relocate(iso, .after = recipient_name)
# second, we merge the estimand and treatment data sets
assignment <- merge(estimand, treatment[, !'country'], by = c("iso", "year"), all.x = T)
setDT(assignment)
assignment[order(recipient_name, year)]
assignment[, c("event_binary", "call__binary", "appeal_binary", "declaration_binary") :=
.(
ifelse(event_n %in% c(0,NA), 0, 1),
ifelse(call_n %in% c(0,NA), 0, 1),
ifelse(appeal_n %in% c(0,NA), 0, 1),
ifelse(declaration_n %in% c(0,NA), 0, 1)
)
][]
left_join(estimand, distinct(treatment, country, iso), by = c("recipient_name" = "country"))
left_join(estimand, distinct(treatment, country, iso), by = c("recipient_name" = "country")) |> View()
View(treatment)
View(estimand)
# merge sum of disb to year-specific list of potential dyads
head(target_pop_years)
head(qty_dyad_year)
estimand <- merge(target_pop_years, qty_dyad_year,
by = c("donor_name", "recipient_name","year"),
all.x = TRUE) # rows from x which have no matching row in y are included
head(estimand)
estimand <- estimand[, c('commit_xmarg', 'disb_xmarg') := {
commit_xmarg <- ifelse(commitment != 0, 1, 0)
disb_xmarg <- ifelse(disbursement != 0, 1, 0)
list(commit_xmarg, disb_xmarg)
}]
head(estimand)
View(event_clim_sample)
full_join(distinct(data_clean, recipient_name),
distinct(em_dat, country),
by = c("recipient_name" = "country"),
keep = T) |>
arrange(recipient_name)
full_join(distinct(data_clean, recipient_name),
distinct(em_dat, country),
by = c("recipient_name" = "country"),
keep = T) |>
arrange(country)
left_join(estimand, distinct(em_dat, country, iso), by = c("recipient_name" = "country")) |>
mutate(iso = case_when( # we add the missing ISO
recipient_name == "Côte d'Ivoire" ~ 'CIV',
recipient_name == "Moldova" ~ 'MDA',
recipient_name == "Tanzania" ~ 'TZA',
recipient_name == "China (People's Republic of)" ~ 'CHN',
recipient_name == "Bolivia" ~ 'BOL',
recipient_name == "Venezuela" ~ 'VEN',
recipient_name == "Iran" ~ 'IRN',
recipient_name == "Kosovo" ~ 'XKX',
recipient_name == "Mayotte" ~ 'MYT',
recipient_name == "Micronesia" ~ 'FSM',
recipient_name == "Nauru" ~ 'NRU',
recipient_name == "Wallis and Futuna" ~ 'WLF',
recipient_name == "West Bank and Gaza Strip" ~ 'PSE',
# we also add the ISO of three recipient countries with no observation in the em-dat (treatment) data set
recipient_name == "Equatorial Guinea" ~ 'GNQ',
recipient_name == "Montserrat" ~ 'MSR',
recipient_name == "Turkmenistan" ~ 'TKM',
.default = iso
)) |>
relocate(iso, .after = recipient_name)
left_join(estimand, distinct(em_dat, country, iso), by = c("recipient_name" = "country")) |>
mutate(iso = case_when( # we add the missing ISO
recipient_name == "Côte d'Ivoire" ~ 'CIV',
recipient_name == "Moldova" ~ 'MDA',
recipient_name == "Tanzania" ~ 'TZA',
recipient_name == "China (People's Republic of)" ~ 'CHN',
recipient_name == "Bolivia" ~ 'BOL',
recipient_name == "Venezuela" ~ 'VEN',
recipient_name == "Iran" ~ 'IRN',
recipient_name == "Kosovo" ~ 'XKX',
recipient_name == "Mayotte" ~ 'MYT',
recipient_name == "Micronesia" ~ 'FSM',
recipient_name == "Nauru" ~ 'NRU',
recipient_name == "Wallis and Futuna" ~ 'WLF',
recipient_name == "West Bank and Gaza Strip" ~ 'PSE',
# we also add the ISO of three recipient countries with no observation in the em-dat (treatment) data set
recipient_name == "Equatorial Guinea" ~ 'GNQ',
recipient_name == "Montserrat" ~ 'MSR',
recipient_name == "Turkmenistan" ~ 'TKM',
.default = iso
)) |>
relocate(iso, .after = recipient_name) |>
View()
# first, we merge the iso variable from the treatment data set to the estimand data set.
estimand <- left_join(estimand, distinct(em_dat, country, iso), by = c("recipient_name" = "country")) |>
mutate(iso = case_when( # we add the missing ISO
recipient_name == "Côte d'Ivoire" ~ 'CIV',
recipient_name == "Moldova" ~ 'MDA',
recipient_name == "Tanzania" ~ 'TZA',
recipient_name == "China (People's Republic of)" ~ 'CHN',
recipient_name == "Bolivia" ~ 'BOL',
recipient_name == "Venezuela" ~ 'VEN',
recipient_name == "Iran" ~ 'IRN',
recipient_name == "Kosovo" ~ 'XKX',
recipient_name == "Mayotte" ~ 'MYT',
recipient_name == "Micronesia" ~ 'FSM',
recipient_name == "Nauru" ~ 'NRU',
recipient_name == "Wallis and Futuna" ~ 'WLF',
recipient_name == "West Bank and Gaza Strip" ~ 'PSE',
# we also add the ISO of three recipient countries with no observation in the em-dat (treatment) data set
recipient_name == "Equatorial Guinea" ~ 'GNQ',
recipient_name == "Montserrat" ~ 'MSR',
recipient_name == "Turkmenistan" ~ 'TKM',
.default = iso
)) |>
relocate(iso, .after = recipient_name)
merge(estimand, treatment[, !'country'], by = c("iso", "year"), all.x = T)
# second, we merge the estimand and treatment data sets
assignment <- merge(estimand, treatment[, !'country'], by = c("iso", "year"), all.x = T)
setDT(assignment)
assignment[order(recipient_name, year)]
assignment[, c("event_binary", "call__binary", "appeal_binary", "declaration_binary") :=
.(
ifelse(event_n %in% c(0,NA), 0, 1),
ifelse(call_n %in% c(0,NA), 0, 1),
ifelse(appeal_n %in% c(0,NA), 0, 1),
ifelse(declaration_n %in% c(0,NA), 0, 1)
)
][]
assignment[, c("event_binary", "call__binary", "appeal_binary", "declaration_binary") :=
.(
ifelse(event_n %in% c(0,NA), 0, 1),
ifelse(call_n %in% c(0,NA), 0, 1),
ifelse(appeal_n %in% c(0,NA), 0, 1),
ifelse(declaration_n %in% c(0,NA), 0, 1)
)
]
# cohort: year where the cumulative number of disasters is the lowest but different from zero.
assignment[, c("cohort_event", "cohort_call", "cohort_appeal", "cohort_declaration") :=
.(
fifelse(sum(event_n) == 0, NA_integer_, min(year[event_cum == min(event_cum[event_cum != 0])])),
fifelse(sum(call_n) == 0, NA_integer_, min(year[call_cum == min(call_cum[call_cum != 0])])),
fifelse(sum(appeal_n) == 0, NA_integer_, min(year[appeal_cum == min(appeal_cum[appeal_cum != 0])])),
fifelse(sum(declaration_n) == 0, NA_integer_, min(year[declaration_cum ==min(declaration_cum[declaration_cum != 0])]))
),
by = .(recipient_name, iso)][]
assignment |>
group_by(recipient_name, iso) |>
filter(sum(event_n) == 0)
assignment
assignment |>
group_by(recipient_name, iso) |>
filter(is.na(sum(event_n) == 0))
assignment |>
group_by(recipient_name, iso) |>
filter(is.na(event_n))
# cohort: year where the cumulative number of disasters is the lowest but different from zero.
assignment[, c("cohort_event", "cohort_call", "cohort_appeal", "cohort_declaration") :=
.(
fifelse(sum(event_n, na.rm = T) == 0, NA_integer_, min(year[event_cum == min(event_cum[event_cum != 0])])),
fifelse(sum(call_n, na.rm = T) == 0, NA_integer_, min(year[call_cum == min(call_cum[call_cum != 0])])),
fifelse(sum(appeal_n, na.rm = T) == 0, NA_integer_, min(year[appeal_cum == min(appeal_cum[appeal_cum != 0])])),
fifelse(sum(declaration_n, na.rm = T) == 0, NA_integer_, min(year[declaration_cum ==min(declaration_cum[declaration_cum != 0])]))
),
by = .(recipient_name, iso)][]
assignment[, c("cohort_event", "cohort_call", "cohort_appeal", "cohort_declaration") := .(
ifelse(sum(event_n, na.rm = T) == 0, NA_integer_, min(year[event_cum != 0])),
ifelse(sum(call_n, na.rm = T) == 0, NA_integer_, min(year[call_cum != 0])),
ifelse(sum(appeal_n, na.rm = T) == 0, NA_integer_, min(year[appeal_cum != 0])),
ifelse(sum(declaration_n, na.rm = T) == 0, NA_integer_, min(year[declaration_cum != 0]))
), by = .(recipient_name, iso)][]
# cohort: year where the cumulative number of disasters is the lowest but different from zero.
assignment[, c("cohort_event", "cohort_call", "cohort_appeal", "cohort_declaration") := .(
ifelse(sum(event_n, na.rm = T) == 0, NA_integer_, min(year[event_cum != 0])),
ifelse(sum(call_n, na.rm = T) == 0, NA_integer_, min(year[call_cum != 0])),
ifelse(sum(appeal_n, na.rm = T) == 0, NA_integer_, min(year[appeal_cum != 0])),
ifelse(sum(declaration_n, na.rm = T) == 0, NA_integer_, min(year[declaration_cum != 0]))
), by = .(recipient_name, iso)]
assignment[, key := .GRP, by = .(donor_name, recipient_name)]
summarize(assignment,
disb = sum(disbursement, na.rm = T),
.by = c(recipient_name, year, event_binary)) |>
ggplot(aes(x = event_binary, y = log(disb), colour = event_binary)) +
geom_boxplot() +
theme_minimal() +
theme(legend.position = "none") +
labs(x="Treatment", y="Disbursement (log)",
title = "Yearly disbursements to recipient countries",
subtitle = "Treatment: at least one climate-related disaster recorded during the year")
summarize(assignment,
disb = sum(disbursement, na.rm = T),
.by = c(recipient_name, year, event_binary))
summarize(assignment,
disb = sum(disbursement, na.rm = T),
.by = c(recipient_name, year, event_binary)) |>
ggplot(aes(x = as_factor(event_binary), y = log(disb), colour = event_binary)) +
geom_boxplot() +
theme_minimal() +
theme(legend.position = "none") +
labs(x="Treatment", y="Disbursement (log)",
title = "Yearly disbursements to recipient countries",
subtitle = "Treatment: at least one climate-related disaster recorded during the year")
summarize(assignment,
disb = sum(disbursement, na.rm = T),
.by = c(recipient_name, year, event_binary)) |>
ggplot(aes(x = as_factor(event_binary), y = log(disb), colour = as_factor(event_binary))) +
geom_boxplot() +
theme_minimal() +
theme(legend.position = "none") +
labs(x="Treatment", y="Disbursement (log)",
title = "Yearly disbursements to recipient countries",
subtitle = "Treatment: at least one climate-related disaster recorded during the year")
# pivot to wider
plot_treat_binary <- distinct(assignment,
recipient_name, year, event_binary) |>
mutate(event_binary = as.numeric(levels(event_binary))[event_binary]) |>
pivot_wider(names_from = 'year', values_from = 'event_binary') |>
rowwise() |>
mutate(total = sum(c_across(`2002`:`2022`), na.rm = T)) |>
ungroup() |>
mutate(across(`2002`:`2022`, as.integer)) |>
arrange(desc(total)) |>
column_to_rownames(var="recipient_name")
assignment[, event_binary := as_factor(event_binary)]
summarize(assignment,
disb = sum(disbursement, na.rm = T),
.by = c(recipient_name, year, event_binary)) |>
ggplot(aes(x = event_binary, y = log(disb), colour = event_binary)) +
geom_boxplot() +
theme_minimal() +
theme(legend.position = "none") +
labs(x="Treatment", y="Disbursement (log)",
title = "Yearly disbursements to recipient countries",
subtitle = "Treatment: at least one climate-related disaster recorded during the year")
## Binary switching treatment
# pivot to wider
plot_treat_binary <- distinct(assignment,
recipient_name, year, event_binary) |>
mutate(event_binary = as.numeric(levels(event_binary))[event_binary]) |>
pivot_wider(names_from = 'year', values_from = 'event_binary') |>
rowwise() |>
mutate(total = sum(c_across(`2002`:`2022`), na.rm = T)) |>
ungroup() |>
mutate(across(`2002`:`2022`, as.integer)) |>
arrange(desc(total)) |>
column_to_rownames(var="recipient_name")
## Heatmap
# heatmap events
pheatmap::pheatmap(plot_treat_binary |> select(-total),
color = c('red','blue'),
legend_breaks = c(0,1),
legend_labels = c("Not treated", "Treated"),
border_color = "grey90",
cluster_rows = FALSE,
cluster_cols = FALSE,
main = "Binary switching treatment")
## Discrete switching treatment
# pivot to wider
plot_treat_discrete <- distinct(assignment,
recipient_name, year, event_n) |>
pivot_wider(names_from = 'year', values_from = 'event_n') |>
rowwise() |>
mutate(total = sum(c_across(`2002`:`2022`), na.rm = T)) |>
ungroup() |>
mutate(across(`2002`:`2022`, as.integer)) |>
arrange(desc(total)) |>
column_to_rownames(var="recipient_name")
## Heatmap
# heatmap events
pheatmap::pheatmap(plot_treat_discrete |> select(-total),
color = c("red","blue","navy"),
legend_breaks = c(0,1,2),
#    legend_labels = c("Not treated", "Treated"),
border_color = "grey90",
cluster_rows = FALSE,
cluster_cols = FALSE,
main = "Binary switching treatment")
## Binary switching treatment
# pivot to wider
plot_call_binary <- distinct(assignment,
recipient_name, year, call_binary) |>
#  mutate(call_binary = as.numeric(levels(event_binary))[event_binary]) |>
pivot_wider(names_from = 'year', values_from = 'call_binary') |>
rowwise() |>
mutate(total = sum(c_across(`2002`:`2022`), na.rm = T)) |>
ungroup() |>
mutate(across(`2002`:`2022`, as.integer)) |>
arrange(desc(total)) |>
column_to_rownames(var="recipient_name")
distinct(assignment,
recipient_name, year, call_binary)
assignment |>
mutate(across(ends_with('binary'), as_factor))
assignment <- mutate(assignment, across(ends_with('binary'), as_factor))
## Binary switching treatment
# pivot to wider
plot_call_binary <- distinct(assignment,
recipient_name, year, call_binary) |>
mutate(call_binary = as.numeric(levels(event_binary))[event_binary]) |>
pivot_wider(names_from = 'year', values_from = 'call_binary') |>
rowwise() |>
mutate(total = sum(c_across(`2002`:`2022`), na.rm = T)) |>
ungroup() |>
mutate(across(`2002`:`2022`, as.integer)) |>
arrange(desc(total)) |>
column_to_rownames(var="recipient_name")
distinct(assignment,
recipient_name, year, call_binary)
assignment[, c("event_binary", "call_binary", "appeal_binary", "declaration_binary") :=
.(
ifelse(event_n %in% c(0,NA), 0, 1),
ifelse(call_n %in% c(0,NA), 0, 1),
ifelse(appeal_n %in% c(0,NA), 0, 1),
ifelse(declaration_n %in% c(0,NA), 0, 1)
)
]
# second, we merge the estimand and treatment data sets
assignment <- merge(estimand, treatment[, !'country'], by = c("iso", "year"), all.x = T)
setDT(assignment)
assignment[order(recipient_name, year)]
assignment[, c("event_binary", "call_binary", "appeal_binary", "declaration_binary") :=
.(
ifelse(event_n %in% c(0,NA), 0, 1),
ifelse(call_n %in% c(0,NA), 0, 1),
ifelse(appeal_n %in% c(0,NA), 0, 1),
ifelse(declaration_n %in% c(0,NA), 0, 1)
)
]
# cohort: year where the cumulative number of disasters is the lowest but different from zero.
assignment[, c("cohort_event", "cohort_call", "cohort_appeal", "cohort_declaration") := .(
ifelse(sum(event_n, na.rm = T) == 0, NA_integer_, min(year[event_cum != 0])),
ifelse(sum(call_n, na.rm = T) == 0, NA_integer_, min(year[call_cum != 0])),
ifelse(sum(appeal_n, na.rm = T) == 0, NA_integer_, min(year[appeal_cum != 0])),
ifelse(sum(declaration_n, na.rm = T) == 0, NA_integer_, min(year[declaration_cum != 0]))
), by = .(recipient_name, iso)]
assignment[, key := .GRP, by = .(donor_name, recipient_name)]
assignment <- mutate(assignment, across(ends_with('binary'), as_factor))
## Binary switching treatment
# pivot to wider
plot_treat_binary <- distinct(assignment,
recipient_name, year, event_binary) |>
mutate(event_binary = as.numeric(levels(event_binary))[event_binary]) |>
pivot_wider(names_from = 'year', values_from = 'event_binary') |>
rowwise() |>
mutate(total = sum(c_across(`2002`:`2022`), na.rm = T)) |>
ungroup() |>
mutate(across(`2002`:`2022`, as.integer)) |>
arrange(desc(total)) |>
column_to_rownames(var="recipient_name")
## Heatmap
# heatmap events
pheatmap::pheatmap(plot_treat_binary |> select(-total),
color = c('red','blue'),
legend_breaks = c(0,1),
legend_labels = c("Not treated", "Treated"),
border_color = "grey90",
cluster_rows = FALSE,
cluster_cols = FALSE,
main = "Binary switching treatment")
distinct(assignment,
recipient_name, year, call_binary)
## Binary switching treatment
# pivot to wider
plot_call_binary <- distinct(assignment,
recipient_name, year, call_binary) |>
mutate(call_binary = as.numeric(levels(event_binary))[event_binary]) |>
pivot_wider(names_from = 'year', values_from = 'call_binary') |>
rowwise() |>
mutate(total = sum(c_across(`2002`:`2022`), na.rm = T)) |>
ungroup() |>
mutate(across(`2002`:`2022`, as.integer)) |>
arrange(desc(total)) |>
column_to_rownames(var="recipient_name")
## Binary switching treatment
# pivot to wider
plot_call_binary <- distinct(assignment,
recipient_name, year, call_binary) |>
mutate(call_binary = as.numeric(levels(call_binary))[call_binary]) |>
pivot_wider(names_from = 'year', values_from = 'call_binary') |>
rowwise() |>
mutate(total = sum(c_across(`2002`:`2022`), na.rm = T)) |>
ungroup() |>
mutate(across(`2002`:`2022`, as.integer)) |>
arrange(desc(total)) |>
column_to_rownames(var="recipient_name")
## Heatmap
# heatmap events
pheatmap::pheatmap(plot_treat_binary |> select(-total),
color = c('red','blue'),
legend_breaks = c(0,1),
legend_labels = c("Not treated", "Treated"),
border_color = "grey90",
cluster_rows = FALSE,
cluster_cols = FALSE,
main = "Binary switching treatment")
## Heatmap
# heatmap events
pheatmap::pheatmap(plot_treat_binary |> select(-total),
color = c('red','blue'),
legend_breaks = c(0,1),
legend_labels = c("Not treated", "Treated"),
border_color = "grey90",
cluster_rows = FALSE,
cluster_cols = FALSE,
main = "Binary switching call treatment")
source(here::here('scripts', 'library.R'))
load(here('data', 'delivery_channel_crs_analysis.RData'))
load(here('data', 'em_dat_events.RData'))
data_clean <- data_clean[!grepl('regional', recipient_name)]
# Unique, whole-period list
target_pop_period <- data_clean[, CJ(year, donor_name, recipient_name, unique = TRUE)]
# Year-specific lists
target_pop_years <- data_clean[, CJ(donor_name, recipient_name, unique = TRUE), by = year]
# Unique, whole-period list
target_pop_period |>
count(year) |>
head()
data_clean[bi_multi %in% c(1,3,7,8), # filter for bilateral providers only
CJ(year, donor_name, recipient_name, unique = TRUE)] |>
count(year) |>
head()
# Year-specific lists
merge(target_pop_years |> count(year),
data_clean[bi_multi %in% c(1,3,7,8),  # filter for bilateral providers only
CJ(donor_name, recipient_name, unique = TRUE), by = year] |>
count(year),
by = 'year') |>
rename(All = n.x, Bilaterals = n.y) |>
pivot_longer(-year, names_to = "Providers", values_to = "value") |>
ggplot(aes(x=year, y=value, color=Providers)) +
geom_line() +
theme_minimal() +
labs(x='', y='# dyads', title = 'Trend in the number of potential dyads each year')
