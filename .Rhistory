mutate(
cohort_event = if_else(sum(event_cum, na.rm = T) == 0, NA_integer_, min(year[event_cum != 0], na.rm = T)),
cohort_call = if_else(sum(call_cum, na.rm = T) == 0, NA_integer_, min(year[call_cum != 0], na.rm = T)),
cohort_appeal = if_else(sum(appeal_cum, na.rm = T) == 0, NA_integer_, min(year[appeal_cum != 0], na.rm = T)),
cohort_declaration = if_else(sum(declaration_cum, na.rm = T) == 0, NA_integer_, min(year[declaration_cum != 0], na.rm = T)),
.by = recipient_code
)
# convert to factors
assignment <- mutate(estimand_mediator_treatment, across(ends_with('binary'), as_factor))
assignment <- assignment |>
mutate(
id = paste(donor_code, recipient_code, sep = "_"),
id_year = paste(donor_code, recipient_code, year, sep = "_")
) |>
relocate(starts_with("id"), .before = year)
summarize(assignment,
commit = sum(commitment, na.rm = T),
.by = c(recipient_name, year, event_binary)) |>
ggplot(aes(x = event_binary, y = log(disb), colour = event_binary)) +
geom_boxplot() +
theme_minimal() +
theme(legend.position = "none") +
labs(x="Treatment", y=" Commitment, MUSD (log)",
title = "Yearly commitments to recipient countries",
subtitle = "Treatment: at least one climate-related disaster recorded during the year")
summarize(assignment,
commit = sum(commitment, na.rm = T),
.by = c(recipient_name, year, event_binary)) |>
ggplot(aes(x = event_binary, y = log(commit), colour = event_binary)) +
geom_boxplot() +
theme_minimal() +
theme(legend.position = "none") +
labs(x="Treatment", y=" Commitment, MUSD (log)",
title = "Yearly commitments to recipient countries",
subtitle = "Treatment: at least one climate-related disaster recorded during the year")
## Binary switching treatment
# pivot to wider
plot_treat_binary <- distinct(assignment,
recipient_name, year, event_binary) |>
mutate(event_binary = as.numeric(levels(event_binary))[event_binary]) |>
pivot_wider(names_from = 'year', values_from = 'event_binary') |>
rowwise() |>
mutate(total = sum(c_across(`2002`:`2022`), na.rm = T)) |>
ungroup() |>
mutate(across(`2002`:`2022`, as.integer)) |>
arrange(desc(total)) |>
column_to_rownames(var="recipient_name")
## Heatmap
# heatmap events
pheatmap::pheatmap(plot_treat_binary |> select(-total),
color = c('red','blue'),
legend_breaks = c(0,1),
legend_labels = c("Not treated", "Treated"),
border_color = "grey90",
cluster_rows = FALSE,
cluster_cols = FALSE,
main = "Binary switching treatment")
## Binary switching treatment
# pivot to wider
plot_call_binary <- distinct(assignment,
recipient_name, year, call_binary) |>
mutate(call_binary = as.numeric(levels(call_binary))[call_binary]) |>
pivot_wider(names_from = 'year', values_from = 'call_binary') |>
rowwise() |>
mutate(total = sum(c_across(`2002`:`2022`), na.rm = T)) |>
ungroup() |>
mutate(across(`2002`:`2022`, as.integer)) |>
arrange(desc(total)) |>
column_to_rownames(var="recipient_name")
## Heatmap
# heatmap events
pheatmap::pheatmap(plot_treat_binary |> select(-total),
color = c('red','blue'),
legend_breaks = c(0,1),
legend_labels = c("Not treated", "Treated"),
border_color = "grey90",
cluster_rows = FALSE,
cluster_cols = FALSE,
main = "Binary switching 'large' treatment")
panelView::panelview(commit_xmarg ~ 1,
data = assignment,
index = c("id","year"),
xlab = "Year", ylab = "Dyads")
panelView::panelview(commitment ~ 1,
data = assignment,
index = c("id","year"),
xlab = "Year", ylab = "Dyads")
View(assignment)
panelView::panelview(commitment ~ 1,
data = assignment,
index = c("id","year"),
xlab = "Year", ylab = "Dyads",
type = "missing")
df <- as.data.frame(assignment)
panelView::panelview(commitment ~ 1,
data = df,
index = c("id","year"),
xlab = "Year", ylab = "Dyads",
type = "missing")
View(assignment)
source(here::here('scripts', 'library.R'))
load(here('data', 'delivery_channel_crs_analysis.RData'))
load(here('data', 'em_dat_events.RData'))
data_disaster <- data_delivery |>
mutate(
donor_code = sprintf("%04d", donor_code),
recipient_code = sprintf("%04d", recipient_code)
)
data_disaster <- data_disaster |>
filter(!grepl('regional', recipient_name))
# Unique, whole-period list
target_pop_period <- data_disaster |>
expand(year, nesting(donor_code, donor_name), nesting(recipient_code, recipient_name))
# donors
cohort_donor_year <- distinct(data_disaster, donor_code, donor_name, year) |>
mutate(cohort_donor = min(year, na.rm = T), .by = donor_code) |>
distinct(donor_code, donor_name, cohort_donor) |>
arrange(donor_name)
# recipients
cohort_recipient_year <- distinct(data_disaster, recipient_code, recipient_name, year) |>
mutate(cohort_recipient = min(year, na.rm = T), .by = recipient_code) |>
distinct(recipient_code, recipient_name, cohort_recipient) |>
arrange(recipient_name)
full_join(cohort_donor_year, cohort_recipient_year, by = c("donor_code" = "recipient_code")) |>
filter(!is.na(cohort_recipient) & !is.na(cohort_donor)) |>
select(donor_name)
target_pop_period_cohort_donor <- left_join(target_pop_period, cohort_donor_year,
by = c("donor_code", "donor_name"))
target_pop_period_cohort <- left_join(target_pop_period_cohort_donor, cohort_recipient_year,
by = c("recipient_code", "recipient_name"))
target_pop <- target_pop_period_cohort |>
mutate(dummy_universe = ifelse(year >= cohort_donor & year >= cohort_recipient, 1, 0))
target_pop |>
sample_n(5) |>
head()
target_pop <- target_pop |> mutate(
id = paste(donor_code, recipient_code, sep = "_"),
id_year = paste(donor_code, recipient_code, year, sep = "_")
) |>
relocate(starts_with("id"), .before = year)
# convert to DT and set keys
setDT(target_pop, key = c("id", "id_year"))
head(target_pop)
data <- target_pop |>
select(id, year, dummy_universe)
panelView::panelview(1 ~ dummy_universe,
data = data,
index = c("id","year"),
type = "treat",
xlab = "Year", ylab = "Dyad",
legend.labs = c("NA", "R"),
main = "Unbalanced panel data",
gridOff = T, display.all = F,
by.timing = T
)
# Year-specific lists
data_disaster |>
summarize(Donors = n_distinct(donor_name),
Recipients = n_distinct(recipient_name),
.by = year) |>
pivot_longer(c("Donors", "Recipients"), names_to = "Actors", values_to = "Number") |>
ggplot(aes(x = year, y = Number, color = Actors)) +
geom_line() +
theme_minimal()
# remove unncessary objects
rm(data, data_clean, data_delivery, target_pop_period_cohort_donor, target_pop_period_cohort, target_pop_period)
# Sum of disb. per dyad-year
setDT(data_disaster)
qty_dyad_year <- data_disaster[, .(
commitment = sum(usd_commitment_defl, na.rm = TRUE),
disbursement = sum(usd_disbursement_defl, na.rm = TRUE)),
by = .(donor_code, donor_name, recipient_code, recipient_name, year)
]
head(qty_dyad_year)
qty_dyad_year[, `:=` (
id = paste(donor_code, recipient_code, sep = "_"),
id_year = paste(donor_code, recipient_code, year, sep = "_")
)
]
qty_dyad_year <- qty_dyad_year |>
relocate(starts_with("id"), .before = donor_code)
setDT(qty_dyad_year, key = c("id", "id_year"))
# merge sum of disb to year-specific list of potential dyads
head(target_pop) # full sample
head(qty_dyad_year) # aid flows
estimand <- merge(target_pop,
qty_dyad_year |> select(id_year, commitment, disbursement),
by = "id_year",
all.x = TRUE) # rows from x which have no matching row in y are included
head(estimand)
# look at share of missing values
estimand |>
slice_sample(prop = .1) |>
vis_miss()
estimand <- estimand |>
mutate(across(c("commitment", "disbursement"), ~ ifelse(is.na(.x) & dummy_universe == 1, 0, .x)))
estimand |>
slice_sample(prop = .1) |>
vis_miss()
estimand <- estimand[, `:=` (
commit_xmarg = ifelse(commitment == 0 | is.na(commitment), 0, 1),
disb_xmarg = ifelse(disbursement == 0 | is.na(disbursement), 0, 1)
)]
head(estimand)
# two-way frequency table
table(data_disaster$channel_bypass, data_disaster$channel_bypass_ngo)
# create new channel-related vars: share of commitments going through nonstate, (nonstate) ngo, and other nonstate actors
mediator_dyad_year <- data_disaster[, .(
sh_nonstate = sum(usd_commitment_defl[channel_bypass_ngo != "No"], na.rm = T) / sum(usd_commitment_defl, na.rm = T),
sh_nonstate_ngo = sum(usd_commitment_defl[channel_bypass_ngo == "Yes (NGO)"], na.rm = T) / sum(usd_commitment_defl, na.rm = T),
sh_nonstate_other = sum(usd_commitment_defl[channel_bypass_ngo == "Yes (Other)"], na.rm = T) / sum(usd_commitment_defl, na.rm = T)
),
by = .(donor_code, donor_name, recipient_code, recipient_name, year)]
sample_n(mediator_dyad_year, 5)
summary(mediator_dyad_year[, 6:8])
# missing data
vis_miss(mediator_dyad_year)
# observations with missing
mediator_dyad_year |>
filter(is.na(sh_nonstate))
# missing data are due to observations with commitments valued as '0'
data_disaster |>
filter((donor_code == "0005" & recipient_code == "0228") & year == 2006)
# replace NaN to zeroes
mediator_dyad_year <- mediator_dyad_year |>
mutate(across(starts_with("sh_"), \(x) replace_na(x, 0)))
summary(mediator_dyad_year[, 6:8])
mediator_dyad_year |>
pivot_longer(-c(donor_code, donor_name, recipient_code, recipient_name, year),
names_to = "channel", values_to = "share") |>
ggplot(aes(x = share, color = channel)) +
geom_density() +
theme_minimal()
mediator <- mediator_dyad_year |>
mutate(
channel_nonstate = ifelse(sh_nonstate > mean(sh_nonstate,na.rm = T), 1, 0),
channel_nonstate_ngo = ifelse(sh_nonstate_ngo > mean(sh_nonstate_ngo,na.rm = T), 1, 0),
channel_nonstate_other = ifelse(sh_nonstate_other > mean(sh_nonstate_other,na.rm = T), 1, 0)
) |>
select(-c("sh_nonstate", "sh_nonstate_ngo", "sh_nonstate_other"))
rm(data)
sample_n(mediator, 5)
summary(mediator[,6:8])
# unique identifiers (key)
mediator <- mediator |>
mutate(
id = paste(donor_code, recipient_code, sep = "_"),
id_year = paste(donor_code, recipient_code, year, sep = "_")
) |>
relocate(year, .before = donor_code) |>
relocate(starts_with("id"), .before = year)
setDT(mediator, key = c("id", "id_year"))
head(mediator)
# merge
estimand_mediator <- merge(estimand,
mediator |> select(id_year, starts_with("channel_nonstate")),
all.x = TRUE)
head(estimand_mediator)
summary(estimand_mediator)
# replace NAs w/ zeroes when aid flows are zeroes (!= NAs)
estimand_mediator <- estimand_mediator |>
mutate(across(starts_with("channel"), \(x) ifelse(is.na(x) & dummy_universe == 1, replace_na(0), x)))
head(estimand_mediator)
setDT(em_dat)
# filter climate-related disasters only
event_clim_sample <-  em_dat[grepl('nat-cli-dro|nat-hyd-flo|nat-met-ext|nat-met-sto', classification_key)]
vis_dat(event_clim_sample)
vis_miss(event_clim_sample)
# create new vars
## event_n: number of event(s) per year in each country.
## call_n: number of event(s) per year in each country where international assistance was requested or a state of emergency was declared.
## appeal_n: number of event(s) per year in each country where international assistance was requested.
## declaration_n: number of event(s) per year in each country where a state of emergency was declared.
## event_cum: cumulative number of events in each country since 2002 (start year of the CRS data set)
treatment <- event_clim_sample[year >= 2002
][, .( # Number of events
event_n = .N,
call_n = sum(call == "Yes"),
appeal_n = sum(call_type == "Appeal"),
declaration_n = sum(call_type == "Declaration")
),
by = .(country, iso, year)
][order(country, year)
][,`:=` ( # Cumulative number of events since 2002
event_cum = cumsum(event_n),
call_cum = cumsum(call_n),
appeal_cum = cumsum(appeal_n),
declaration_cum = cumsum(declaration_n)
),
by = .(country, iso)
]
# missing matching countries between both data sets
full_join(distinct(data_disaster, recipient_name),
distinct(em_dat, country),
by = c("recipient_name" = "country"),
keep = T) |>
arrange(country) |>
head()
left_join(distinct(data_disaster, recipient_name),
distinct(em_dat, country),
by = c("recipient_name" = "country"),
keep = T) |>
filter(is.na(country)) |>
arrange(recipient_name) |>
head()
right_join(distinct(data_disaster, recipient_name),
distinct(em_dat, country),
by = c("recipient_name" = "country"),
keep = T) |>
filter(is.na(recipient_name)) |>
arrange(country) |>
head()
# missing in em_dat / treatment data set: Nauru, Wallis and Futuna, Kosovo, Côte d'Ivoire, Tanzania, West Bank and Gaza Strip, China (People's Republic of), Bolivia, Venezuela, Iran, Micronesia, Mayotte
# first, we merge the iso variable from the treatment data set to the estimand data set.
estimand_mediator_iso <- left_join(estimand_mediator, distinct(em_dat, country, iso),
by = c("recipient_name" = "country")) |>
mutate(iso = case_when( # we add the missing ISO
recipient_name == "Côte d'Ivoire" ~ 'CIV',
recipient_name == "Moldova" ~ 'MDA',
recipient_name == "Tanzania" ~ 'TZA',
recipient_name == "China (People's Republic of)" ~ 'CHN',
recipient_name == "Bolivia" ~ 'BOL',
recipient_name == "Venezuela" ~ 'VEN',
recipient_name == "Iran" ~ 'IRN',
recipient_name == "Kosovo" ~ 'XKX',
recipient_name == "Mayotte" ~ 'MYT',
recipient_name == "Micronesia" ~ 'FSM',
recipient_name == "Nauru" ~ 'NRU',
recipient_name == "Wallis and Futuna" ~ 'WLF',
recipient_name == "West Bank and Gaza Strip" ~ 'PSE',
# we also add the ISO of three recipient countries with no observation in the em-dat (treatment) data set
recipient_name == "Equatorial Guinea" ~ 'GNQ',
recipient_name == "Montserrat" ~ 'MSR',
recipient_name == "Turkmenistan" ~ 'TKM',
.default = iso
)) |>
relocate(iso, .after = recipient_name)
# missing data
estimand_mediator_iso |>
sample_n(5000) |>
vis_miss()
estimand_mediator_treatment <- merge(estimand_mediator_iso, treatment[, !'country'],
by = c("iso", "year"), all.x = T) |>
select(-iso)
head(estimand_mediator_treatment)
# estimand_mediator_treatment |> filter(is.na(commitment) & !is.na(event_n))
rm(estimand_mediator_iso)
estimand_mediator_treatment <- estimand_mediator_treatment |>
mutate(across(event_n:declaration_cum, \(x) ifelse(is.na(x) & dummy_universe == 1, replace_na(0), x)))
estimand_mediator_treatment |> sample_n(1000) |> vis_miss()
estimand_mediator_treatment <- estimand_mediator_treatment |>
mutate(
event_binary = ifelse(event_n %in% c(0,NA), 0, 1),
call_binary = ifelse(call_n %in% c(0,NA), 0, 1),
appeal_binary = ifelse(appeal_n %in% c(0,NA), 0, 1),
declaration_binary = ifelse(declaration_n %in% c(0,NA), 0, 1)
)
# cohort: year where the cumulative number of disasters is the lowest but different from zero
estimand_mediator_treatment <- estimand_mediator_treatment |>
mutate(
cohort_event = if_else(sum(event_cum, na.rm = T) == 0, NA_integer_, min(year[event_cum != 0], na.rm = T)),
cohort_call = if_else(sum(call_cum, na.rm = T) == 0, NA_integer_, min(year[call_cum != 0], na.rm = T)),
cohort_appeal = if_else(sum(appeal_cum, na.rm = T) == 0, NA_integer_, min(year[appeal_cum != 0], na.rm = T)),
cohort_declaration = if_else(sum(declaration_cum, na.rm = T) == 0, NA_integer_, min(year[declaration_cum != 0], na.rm = T)),
.by = recipient_code
)
# convert to factors
assignment <- mutate(estimand_mediator_treatment, across(ends_with('binary'), as_factor))
assignment <- assignment |>
mutate(
id = paste(donor_code, recipient_code, sep = "_"),
id_year = paste(donor_code, recipient_code, year, sep = "_")
) |>
relocate(starts_with("id"), .before = year)
# checks
distinct(data_disaster, donor_name)
distinct(assignment, donor_name)
distinct(data_disaster, recipient_name)
distinct(assignment, recipient_name)
# outcome
assignment |>
select(commitment, disbursement, commit_xmarg, disb_xmarg) |>
summary()
# mediator
assignment |>
select(starts_with("channel")) |>
summary()
# treatment
assignment |>
select(event_n:declaration_binary) |>
summary()
summarize(assignment,
commit = sum(commitment, na.rm = T),
.by = c(recipient_name, year, event_binary)) |>
ggplot(aes(x = event_binary, y = log(commit), colour = event_binary)) +
geom_boxplot() +
theme_minimal() +
theme(legend.position = "none") +
labs(x="Treatment", y=" Commitment, MUSD (log)",
title = "Yearly commitments to recipient countries",
subtitle = "Treatment: at least one climate-related disaster recorded during the year")
View(assignment)
look_for(assignment)
summary(assignment)
min(assignment$id)
max(assignment$id)
min(assignment$donor_code)
max(assignment$donor_code)
min(assignment$recipient_code)
max(assignment$recipient_code)
remotes::install_github("jtextor/dagitty/r")
library( dagitty )
dagitty { dag {
dagitty (
dag {
?dagitty
dagitty(dag {
dagitty(" dag {
bb='-3.074,-3.798,3.306,3.467'
'Channel of delivery_i,j,t (mediator)' [pos='-0.280,0.509']
'Donor's characteristics_i,t' [latent,pos='2.198,2.723']
'Donor-Recipient relationships_i,j,t' [pos='-0.231,2.609']
'External finance_i,j,t (estimand/outcome)' [outcome,pos='2.022,-0.521']
'External finance_i,j,t-1' [pos='1.206,-1.902']
'External finance_i,y,t' [pos='2.900,-1.747']
'Extreme event_j,t (treatment)' [exposure,pos='-2.488,-0.701']
'Recipient's characteristics_j,t' [latent,pos='-2.443,2.674']
}"
)
dagitty(" dag {
bb="-3.074,-3.798,3.306,3.467"
m [pos="-0.280,0.509"]
dagitty(" dag {
m
i [unobserved]
i-j [unobserved]
y [outcome]
y_t-1
y_z [unobserved]
d [exposure]
j [unobserved]
m -> y
j -> m
i -> i-j
i -> y
i-j -> m
i-j -> y
y -> y
y_t-1 -> y
d -> m
d -> y
j -> m
j -> i-j
j -> y
j -> d
}"
)
dagitty(" dag {
m
i [unobserved]
i-j [unobserved]
y [outcome]
y_t-1
y_z [unobserved]
d [exposure]
j [unobserved]
m -> y
j -> m
i -> i-j
i -> y
i-j -> m
i-j -> y
y -> y
y_t-1 -> y
d -> m
d -> y
j -> m
j -> i-j
j -> y
j -> d
}", layout = T
)
myDAG <- dagitty(" dag {
m
i [unobserved]
i-j [unobserved]
y [outcome]
y_t-1
y_z [unobserved]
d [exposure]
j [unobserved]
m -> y
j -> m
i -> i-j
i -> y
i-j -> m
i-j -> y
y -> y
y_t-1 -> y
d -> m
d -> y
j -> m
j -> i-j
j -> y
j -> d
}", layout = T
)
plot( myDAG )
install.packages( "lavaan" )
libary(lavaan)
library(lavaan)
installr::updateR()
