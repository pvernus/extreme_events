---
title: "Untitled"
format: html
editor: visual
bibliography: references.bib
---

```{r}

source(here::here('scripts', 'library.R'))

load(here('data', 'data_oecd_crs_clean.RData'))
load(here('data', 'data_emdat_clean.RData'))
```

# Estimand

## Target population

First, we create unique identifiers for donors, recipients, donor-recipient dyads, and donor-recipient-year tryads. The latter has the following format: XXXX_XXXX_XXXX (`donor_coderecipient_codeyear`).

```{r}
data_disaster <- data_channel |> 
  fmutate(
    id_donor = sprintf("%04d", donor_code),
    id_recipient = sprintf("%04d", recipient_code)
  )
```

Second, we define our universe.

-   We only consider donors and (non-regional) recipients included in the CRS data set;

```{r}
data_disaster <- data_disaster |> 
  filter(!grepl('regional', recipient_name))
```

Note: merge AidData's Chinese ODA data set?

-   We cover the period from 2002 to 2022.

Note: the start year would probably evolve, depending on missing data for channels of delivery.

This gives us a first set of units of observation.

### Unbalanced panel data

However, the number of donors and recipients has changed over time, so the sample is **unbalanced**.

### Selection bias due to zeroes

Question: how should we treat missing values (NA/0) ?

-   =0 when at least one commitment \| disbursement is observed over the period, NA otherwise;

-   =0 when at least one commitment \| disbursement is observed in the current year, NA otherwise;

-   =0 when **at least one commitment \| disbursement has been observed in the current \| previous years**, NA otherwise.

Process:

-   Create the full sample, `target_pop_period`, which include all possible combinations of years, donors, recipients, and sectors in the CRS data set *for the whole period*

```{r}
# Unique, whole-period list
# donor-recipient-sector-year
target_pop_period <- data_disaster |> 
  expand(year, nesting(donor_code, donor_name), nesting(recipient_code, recipient_name), nesting(sector_code, sector_name))
```

-   Create two data sets, `cohort_donor_year` and `cohort_recipient_year`, with the list of donors/recipients and their respective year of cohort (i.e. the minimum for which we have an observation in our full sample);

```{r}
# donors
cohort_donor_year <- distinct(data_disaster, donor_code, donor_name, year) |> 
  mutate(cohort_donor = min(year, na.rm = T), .by = donor_code) |>  
  distinct(donor_code, donor_name, cohort_donor) |> 
  arrange(donor_name)
# recipients
cohort_recipient_year <- distinct(data_disaster, recipient_code, recipient_name, year) |> 
  mutate(cohort_recipient = min(year, na.rm = T), .by = recipient_code) |>  
  distinct(recipient_code, recipient_name, cohort_recipient) |> 
  arrange(recipient_name)
```

Note: five countries are both donors and recipients

```{r}
full_join(cohort_donor_year, cohort_recipient_year, by = c("donor_code" = "recipient_code")) |>
  filter(!is.na(cohort_recipient) & !is.na(cohort_donor)) |> 
  select(donor_name)
```

-   Merge both data sets to the full sample `target_pop_period`;

```{r}
target_pop_period_cohort <- left_join(target_pop_period, cohort_donor_year, 
                                            by = c("donor_code", "donor_name")) |>
  left_join(cohort_recipient_year, by = c("recipient_code", "recipient_name"))
```

-   Create a dummy variable `dummy_universe` that takes the value 1 when at least one observation has been observed for both the donor *and* the recipient during or before the current year.

> Note: the idea is to use this dummy to treat missing values. A missing value is considered as '0' when `dummy_universe` equals '1' and as 'NA' when it equals '0'.

> Question : should dummy_universe be at the donor-recipient-sector level?

```{r}
target_pop <- target_pop_period_cohort |> 
  mutate(dummy_universe = ifelse(year >= cohort_donor & year >= cohort_recipient, 1, 0))

target_pop |> 
  sample_n(5) |> 
  head()
```

```{r}
# add id vars
target_pop <- target_pop |> 
  mutate(
    id_actor = paste(donor_code, recipient_code, sep = "_"),
    id = paste(id_actor, sector_code, year, sep = "_")
    ) |> 
  relocate(starts_with("id"), .before = year)
# convert to DT and set keys
setDT(target_pop, key = c("id_actor", "id"))

head(target_pop)
```

```{r}
# Visualize the unbalanced panel data
# data <- target_pop[, .(id_actor, year, dummy_universe)]

# panelView::panelview(1 ~ dummy_universe,
#                     data = data, 
#                     index = c("id_actor","year"), 
#                     type = "treat", 
#                     xlab = "Year", ylab = "Dyad",
#                     legend.labs = c("NA", "R"),
#                     main = "Unbalanced panel data",
#                     gridOff = T, display.all = F,
#                    by.timing = T
#                    )
```

> Note: most of the variation comes from nonbilateral providers. Filter the full sample to bilateral providers only? However, multilaterals are important actors following disasters.

```{r}
# Year-specific lists
data_disaster |> 
  summarize(Donors = n_distinct(donor_name), 
            Recipients = n_distinct(recipient_name),
            .by = year) |> 
  pivot_longer(c("Donors", "Recipients"), names_to = "Actors", values_to = "Number") |> 
  ggplot(aes(x = year, y = Number, color = Actors)) +
  geom_line() +
  theme_minimal()
```

```{r}
# remove unncessary objects
rm(target_pop_period_cohort, target_pop_period)
```

## Unit-specific quantity

### Unit-specific

Note: for now we focus on **yearly provider-recipient dyads**. However, later we could disaggregate to provider-agency and recipient-sector levels.

```{r}

# Sum of disb. per dyad-sector-year
setDT(data_disaster)
qty_dyad_sector_year <- copy(data_disaster)
qty_dyad_sector_year <- qty_dyad_sector_year[, .(
  commitment = sum(usd_commitment_defl, na.rm = TRUE),
  disbursement = sum(usd_disbursement_defl, na.rm = TRUE)),
  by = .(donor_code, donor_name, recipient_code, recipient_name, sector_code, sector_name, year)
  ]

head(qty_dyad_sector_year)
```

-   Create unique identifiers donor-recipient dyads (`id_actor`), donor-recipient-year tryads (`id_year`), and donor-recipient-sector-year (`id`).

```{r}
qty_dyad_sector_year[, `:=` (
    id_actor = paste(donor_code, recipient_code, sep = "_"),
    id = paste(donor_code, recipient_code, sector_code, year, sep = "_")
)
]

qty_dyad_sector_year <- qty_dyad_sector_year |> 
  relocate(starts_with("id"), .before = donor_code)

setDT(qty_dyad_sector_year, key = c("id", "id_actor"))
```

-   Merge with `qty_dyad_year` (aid flows) with `target_pop` (full sample).

```{r}

# merge sum of disb to year-specific list of potential dyads
head(target_pop) # full sample
head(qty_dyad_sector_year) # aid flows

estimand <- merge(target_pop, 
                  qty_dyad_sector_year |> select(id, commitment, disbursement), 
      by = "id", 
      all.x = TRUE) # rows from x which have no matching row in y are included

head(estimand)

estimand[!is.na(disbursement)]
```

-   Visualize missing data.

```{r}
# look at share of missing values
estimand |> 
  slice_sample(n = 1000) |> 
  vis_miss()
```

> Note: as explained above, some missing data is due to non-existing actors at year t, while other missing data is due to existing actors but with no aid flow at year t. The former should be considered as NAs and the latter as zeroes. Consequently, we replace NAs by 0 conditioning on `dummy_universe` == 1.

```{r}
estimand <- estimand |> 
  mutate(across(c("commitment", "disbursement"), ~ ifelse(is.na(.x) & dummy_universe == 1, 0, .x)))
```

```{r}
estimand |> 
  slice_sample(n = 1000) |> 
  vis_miss()
```

### Quantity

We include dummy variables to account for the extensive margin.

```{r}
estimand <- estimand |> 
  mutate(
  commit_xmarg = ifelse(commitment == 0 | is.na(commitment), 0, 1),
  disb_xmarg = ifelse(disbursement == 0 | is.na(disbursement), 0, 1)  
)

head(estimand)
```

> Note: for an alternative in the definition of the unit of observation, see [@yotovAdvancedGuideTrade2016], p.23: adjustment to treatment, data pooled over consecutive years vs. 3/5-year intervals.

# Mediator (channel of delivery)

## Channel typologies

-   Create variables for the channels of delivery:

```{r}
# two-way frequency table
table(data_disaster$channel_nonstate, data_disaster$channel_nonstate_ngo)
table(data_disaster$channel_nonstate, data_disaster$channel_nonstate_multi)
table(data_disaster$channel_nonstate, data_disaster$channel_nonstate_private)
```

```{r}
# create new channel-related vars: share of commitments going through nonstate, (nonstate) ngo, and other nonstate actors
mediator_dyad_sector_year <- copy(data_disaster)

mediator_dyad_sector_year <- mediator_dyad_sector_year |> 
  fsummarize(
    sh_nonstate = sum(usd_commitment_defl[channel_nonstate==1], na.rm = T)/
      sum(usd_commitment_defl, na.rm = T),
    sh_nonstate_ngo = sum(usd_commitment_defl[channel_nonstate_ngo==1], na.rm = T)/
      sum(usd_commitment_defl, na.rm = T),
    sh_nonstate_multi = sum(usd_commitment_defl[channel_nonstate_multi==1], na.rm = T)/
      sum(usd_commitment_defl, na.rm = T),
    sh_nonstate_private = sum(usd_commitment_defl[channel_nonstate_private==1], na.rm = T)/
      sum(usd_commitment_defl, na.rm = T),
    .by = c(donor_code, donor_name, recipient_code, recipient_name, sector_code, sector_name, year)
  )

sample_n(mediator_dyad_sector_year, 5)

# validity check
# mediator_dyad_sector_year[sh_nonstate < 0, ]
# mediator_dyad_sector_year[sh_nonstate > 1, ]
```

> Note (1): how to deal with negative flows (leading to values \< 0 and \> 1?

```{r}
summary(mediator_dyad_sector_year[, 8:11])
```

> Note (1): Most channel vars are either 0 or 1. Dummy var instead of percentage var seems more relevant for the analysis. Note (2): missing data are due to observations with commitments valued as '0'.

-   Replace NAs by zeroes in delivery channel variables.

```{r}
# missing data
mediator_dyad_sector_year |> 
  sample_n(1000) |> 
  vis_miss()

# observations with missing 
mediator_dyad_sector_year |> 
  filter(is.na(sh_nonstate))

# missing data are due to observations with commitments valued as '0'
data_disaster |> 
  filter((donor_code == "0005" & recipient_code == "0228") & year == 2006)

# replace NaN to zeroes
mediator_dyad_sector_year <- mediator_dyad_sector_year |> 
  mutate(across(starts_with("sh_"), \(x) replace_na(x, 0)))

summary(mediator_dyad_sector_year[, 8:11])
```

## Variables

Channel delivery variables follow a **bipolarized distribution**, with max at 0 and 1. Thus, it might be more relevant to use binary variables.

```{r}
mediator_dyad_sector_year |> 
  pivot_longer(-c(donor_code, donor_name, recipient_code, recipient_name, sector_code, sector_name, year),
               names_to = "channel", values_to = "share") |> 
  ggplot(aes(x = share, color = channel)) +
  geom_density() +
  theme_minimal()
```

However, Which *threshold* to choose?

-   50%
-   **median** (mean), cf. [@bernardIntermediariesInternationalTrade2015]: use a dummy that takes value 1 if the intermediary share of an observation ... is above the median (mean) value of intermediary share across observations.

```{r}

mediator <- mediator_dyad_sector_year |> 
  mutate(
  channel_nonstate = ifelse(sh_nonstate > median(sh_nonstate, na.rm = T), 1, 0),
  channel_nonstate_ngo = ifelse(sh_nonstate_ngo > median(sh_nonstate_ngo, na.rm = T), 1, 0),
  channel_nonstate_multi = ifelse(sh_nonstate_multi > median(sh_nonstate_multi, na.rm = T), 1, 0),
  channel_nonstate_private = ifelse(sh_nonstate_private > median(sh_nonstate_private, na.rm = T), 1, 0)
  ) |> 
  select(-c("sh_nonstate", "sh_nonstate_ngo", "sh_nonstate_multi", "sh_nonstate_private"))

sample_n(mediator, 5)

summary(mediator[, 8:11])

```

-   Merge `mediator` (channels of delivery) and `estimand` (aid flows).

```{r}
# unique identifiers (key)
mediator <- mediator |> 
  mutate(
    id_actor = paste(donor_code, recipient_code, sep = "_"),
    id = paste(id_actor, sector_code, year, sep = "_")
    ) |> 
  relocate(year, .before = donor_code) |> 
  relocate(starts_with("id"), .before = year)

setDT(mediator, key = c("id_actor", "id"))

head(mediator)

# merge
estimand_mediator <- merge(estimand, 
                           mediator |> select(id, starts_with("channel_nonstate")),
                           all.x = TRUE)

head(estimand_mediator)
summary(estimand_mediator)

# replace NAs w/ zeroes when aid flows are zeroes (!= NAs)
estimand_mediator <- estimand_mediator |> 
  mutate(across(starts_with("channel"), \(x) ifelse(is.na(x) & dummy_universe == 1, replace_na(0), x)))

head(estimand_mediator)
```

# Treatment

## Assignment mechanism

For now, we only consider: - the number of event(s) per year in each country and - the cumulative number of events in each country since 2002.

> Note: the choice of period covered by the analysis will impact the the cumulative number of events in each country.

-   Create variables for the number of yearly disasters in each country.

```{r}

# create new vars 
## event_n: number of event(s) per year in each country.
## call_n: number of event(s) per year in each country where international assistance was requested or a state of emergency was declared.
## appeal_n: number of event(s) per year in each country where international assistance was requested.
## declaration_n: number of event(s) per year in each country where a state of emergency was declared.
## event_cum: cumulative number of events in each country since 2002 (start year of the CRS data set)

treatment <- copy(em_dat)
treatment <- treatment[year >= 2002
][, .( # Number of events
  event_n = .N, 
  appeal_n = sum(appeal == "Yes", na.rm = T),
  declaration_n = sum(declaration == "Yes", na.rm = T)
  ), 
  by = .(country, iso, year)
][order(country, year)
][,`:=` ( # Cumulative number of events since 2002
  event_cum = cumsum(event_n),
  call_cum = cumsum(call_n),
  appeal_cum = cumsum(appeal_n),
  declaration_cum = cumsum(declaration_n)
  ),
  by = .(country, iso)
  ]
```

Note: We will add a binary variable (switching/on-off treatment) after merging with the `estimand_mediator` data set.

-   Merge the `estimand_mediator` and `treatment` data sets by recipient country-year pairs.

> Note (1): we only keep countries which have received/reported aid flows to the OECD. In other words, we don't include: (high-income) bilateral donors, overseas collectivities (ex: la Réunion), and China. Besides, the West Bank and Gaza Strip are not included in the EM-DAT data set.

```{r}
# missing matching countries between both data sets
full_join(distinct(data_disaster, recipient_name), 
          distinct(em_dat, country), 
          by = c("recipient_name" = "country"), 
          keep = T) |> 
  arrange(country) |> 
  head()

left_join(distinct(data_disaster, recipient_name), 
          distinct(em_dat, country), 
          by = c("recipient_name" = "country"), 
          keep = T) |> 
  filter(is.na(country)) |> 
  arrange(recipient_name) |> 
  head()

right_join(distinct(data_disaster, recipient_name), 
          distinct(em_dat, country), 
          by = c("recipient_name" = "country"), 
          keep = T) |> 
  filter(is.na(recipient_name)) |> 
  arrange(country) |> 
  head()
```

> Note (2): we could include treatments of the donor countries in the analysis.

First, we need to check that country names are similar between both data sets.

-   Merge the `estimand_mediator_iso` and `treatment` data sets.

```{r}
estimand_mediator_treatment <- merge(estimand_mediator_iso, treatment[, !'country'], 
                                     by = c("iso", "year"), all.x = T) |> 
  select(-iso)

head(estimand_mediator_treatment)

# estimand_mediator_treatment |> filter(is.na(commitment) & !is.na(event_n))

rm(estimand_mediator_iso)
```

-   Replace NAs by zeroes conditional on `dummy_universe`.

```{r}
estimand_mediator_treatment <- estimand_mediator_treatment |> 
  mutate(across(event_n:declaration_cum, \(x) ifelse(is.na(x) & dummy_universe == 1, replace_na(0), x)))

estimand_mediator_treatment |> sample_n(1000) |> vis_miss()
```

We add new binary treatment variables (=1 if any event during the year t in country j, 0 otherwise).

```{r}
estimand_mediator_treatment <- estimand_mediator_treatment |> 
  mutate(
    switching_event_dummy = ifelse(event_n %in% c(0,NA), 0, 1),
    switching_call_dummy = ifelse(call_n %in% c(0,NA), 0, 1),
    switching_appeal_dummy = ifelse(appeal_n %in% c(0,NA), 0, 1),
    switching_declaration_dummy = ifelse(declaration_n %in% c(0,NA), 0, 1),
    single_event_dummy = ifelse(switching_event_dummy == 0 & event_cum == 0, 0, 1),
    single_call_dummy = ifelse(switching_call_dummy == 0 & call_cum == 0, 0, 1),
    single_appeal_dummy = ifelse(switching_appeal_dummy == 0 & appeal_cum == 0, 0, 1)
  )
```

We also add a new cohort variable which takes the first year of treatment for each country as a value.

```{r}

# cohort: year where the cumulative number of disasters is the lowest but different from zero
estimand_mediator_treatment <- estimand_mediator_treatment |> 
  mutate(
    cohort_event = if_else(sum(event_cum, na.rm = T) == 0, NA_integer_, min(year[event_cum != 0], na.rm = T)),
    cohort_call = if_else(sum(call_cum, na.rm = T) == 0, NA_integer_, min(year[call_cum != 0], na.rm = T)),
    cohort_appeal = if_else(sum(appeal_cum, na.rm = T) == 0, NA_integer_, min(year[appeal_cum != 0], na.rm = T)),
    cohort_declaration = if_else(sum(declaration_cum, na.rm = T) == 0, NA_integer_, min(year[declaration_cum != 0], na.rm = T)),
    .by = recipient_code
  )

# convert to factors
assignment <- mutate(estimand_mediator_treatment, across(ends_with('dummy'), as_factor))
```

```{r}

# checks
distinct(data_disaster, donor_name)
distinct(assignment, donor_name)

distinct(data_disaster, recipient_name)
distinct(assignment, recipient_name)
```

```{r}
assignment_universe <- copy(assignment)
assignment_universe <- assignment_universe[dummy_universe == 1] # rm obs where one of the actor where not registered in the crs data base at/before year t
```

```{r}
save(assignment_universe, file = here("data", "assignment.RData"))
```

## Plot

### Univariate distributions

```{r}

# outcome
assignment |> 
  select(commitment, disbursement, commit_xmarg, disb_xmarg) |> 
  summary()

# mediator
assignment |> 
  select(starts_with("channel")) |> 
  summary()

# treatment
assignment |> 
  select(event_n:switching_declaration_dummy) |> 
  summary()
```

### Bivariate distributions

Boxplot: climate-related binary switching disasters

```{r}
summarize(assignment,
  commit = sum(commitment, na.rm = T), # disb = sum(disbursement, na.rm = T)
  .by = c(recipient_name, year, switching_event_dummy)) |> 
  ggplot(aes(x = switching_event_dummy, y = log(commit), colour = switching_event_dummy)) +
  geom_boxplot() +
  theme_minimal() +
  theme(legend.position = "none") +
  labs(x="Treatment", y=" Commitment, MUSD (log)", 
       title = "Yearly commitments to recipient countries",
       subtitle = "Treatment: at least one disaster recorded during the year")
```

Treatment plot

```{r}

## Binary switching treatment
# pivot to wider
plot_treat_binary <- distinct(assignment,
         recipient_name, year, switching_event_dummy) |> 
  mutate(switching_event_dummy = as.numeric(levels(switching_event_dummy))[switching_event_dummy]) |> 
  pivot_wider(names_from = 'year', values_from = 'switching_event_dummy') |> 
  rowwise() |> 
  mutate(total = sum(c_across(`2002`:`2022`), na.rm = T)) |> 
  ungroup() |> 
  mutate(across(`2002`:`2022`, as.integer)) |> 
  arrange(desc(total)) |> 
  column_to_rownames(var="recipient_name")
  
## Heatmap
# heatmap events
pheatmap::pheatmap(plot_treat_binary |> select(-total),
    color = c('red','blue'),
    legend_breaks = c(0,1),
    legend_labels = c("Not treated", "Treated"),
    border_color = "grey90",
    cluster_rows = FALSE,
    cluster_cols = FALSE,
    main = "Binary switching treatment")
```

Binary switching *call* treatment

```{r}

## Binary switching treatment
# pivot to wider
plot_call_binary <- distinct(assignment,
         recipient_name, year, switching_call_dummy) |> 
  mutate(switching_call_dummy = as.numeric(levels(switching_call_dummy))[switching_call_dummy]) |> 
  pivot_wider(names_from = 'year', values_from = 'switching_call_dummy') |> 
  rowwise() |> 
  mutate(total = sum(c_across(`2002`:`2022`), na.rm = T)) |> 
  ungroup() |> 
  mutate(across(`2002`:`2022`, as.integer)) |> 
  arrange(desc(total)) |> 
  column_to_rownames(var="recipient_name")
  
## Heatmap
# heatmap events
pheatmap::pheatmap(plot_treat_binary |> select(-total),
    color = c('red','blue'),
    legend_breaks = c(0,1),
    legend_labels = c("Not treated", "Treated"),
    border_color = "grey90",
    cluster_rows = FALSE,
    cluster_cols = FALSE,
    main = "Binary switching 'large' treatment")
```
