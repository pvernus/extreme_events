---
title: "clean_oecd_crs_data"
format: html
editor: visual
---

```{r load_packages}
source(here::here('scripts', 'library.R'))
```

# Data import

```{r import_raw_data}
load(here("data", "data_oecd_crs_raw.RData"))
```

# Data treatment

```{r}
data_short <- data_oecd_crs_raw |> 
  select(1:26, 39, 44:54, 57:59, 62:67, 74:77, 78, 94:96) |> # select relevant vars
  mutate_if(is.character, str_trim) # delete white space before/after text
```

# Data cleaning

## Calibrated sample

We reduce the sample to projects with the following characteristics:

**Nature of submission**

-   **Remove**: (2) Revision, (5) Provisional data, (9) Net disbursements.
-   **Keep**: (1) New activity reported, (3) Previously reported activity (increase/decrease of earlier commitment, disbursement on earlier commitment), (8) Commitment derived from Disbursement, and NAs.

**Cooperation modalities**

-   **Remove**: project observations in provider countries e.g. (E) Scholarships and student costs in donor countries and (H) Other in-donor expenditures.
-   **Keep**: (A) Budget support, (B) Core contributions and pooled programmes and funds, (C) Project-type interventions, (D) Experts and other technical assistance, (F) Debt Relief, (G) Administrative costs not included elsewhere.

> *Question: exclude G and/or F?*

**Recipient**: remove non-specified country/region.

**Funding**: remove observations with missing/null value for both commitment or disbursement variables.

> *Question: include "received" funds when no commitment and disbursement?*

```{r data_clean}

setDT(data_short)

data_calibrated <- copy(data_short)
data_calibrated <- data_calibrated[!initial_report %in% c(2,5,9), 
][!grepl("^[EH].*", aid_t), 
][!grepl('unspecified', recipient_name), 
][(!is.na(usd_commitment_defl) & !is.na(usd_disbursement_defl)) | (!is.na(usd_commitment_defl) & usd_disbursement_defl != 0) | (usd_commitment_defl != 0 & !is.na(usd_disbursement_defl)) | (!usd_commitment_defl != 0 & !usd_disbursement_defl != 0)]                         
```

Besides, duplicates are removed.

```{r data_clean_duplicated}

# data_clean[duplicated(data_clean)|duplicated(data_clean, fromLast = TRUE),]
data_calibrated <- unique(data_calibrated)
```

# Channel of delivery

### Level consistency

The OECD's typology for channels of delivery has a hierarchical structure, with three levels of granularity.

Depending of the channel category, the third level includes either the *type* of agency (ex: Pension Funds in Private sector in provider country) or the *name* of a specific agency (ex: African Development Bank in Regional Development Bank).

The name of the agency can also be added manually by the provider, but reporting is inconsistent and reported agencies aren't always included in the OECD's list of ODA-eligible international organisations.

#### Table: Example with the Donor Government group category.

| Code  | Level 1                    | Code  | Level 2          | Code  | Level 3                                | Reported name                                                                                                |
|----------|----------|----------|----------|----------|----------|----------------|
| 10000 | Public Sector Institutions | 11000 | Donor Government | 11001 | Central Government                     | Ex: Ministry Of Employment And Labor, The U.S Department Of Homeland Security, Miscellaneous Suppliers, etc. |
|       |                            |       |                  | 11002 | Local Government                       | Ex: Comune Di Reggio Emilia, Local Government, Busan Metropolitan City, etc.                                 |
|       |                            |       |                  | 11003 | Public corporations                    | Ex: The Export-Import Bank Of Korea, Kfw, Public Corporations, etc.                                          |
|       |                            |       |                  | 11004 | Other public entities in donor country | Ex: University Of Trento, Korea Rural Economic Institute, King Salman For Relief And Humanitarian Aid Center |

There are two variables with codes for channel of delivery: `channel_parent_category` (level 1) and `channel_code` (levels 2 and 3).

To help the analysis, create a unique code variable using the most granular level when both `channel_parent_category` and `channel_code` are provided.

```{r unique_channel_code_typology}

data_channel <- copy(data_calibrated)

# rename names and observations of vars related to the channel of delivery
data_channel.channel_parent_code <- data_channel |> 
  rename(channel_parent_code = parent_channel_code) |> 
  mutate(across(starts_with("channel") & ends_with('name'), 
                ~ na_if( # replace "" by NA
                  str_squish( # delete space before/after character string
                  str_to_title(.x)),"")))  # harmonize style

# create new variable
data_channel.code_unique <- copy(data_channel.channel_parent_code)
data_channel.code_unique <- data_channel.code_unique[, 
  channel_code_unique := fifelse(
    rowSums(!is.na(.SD)) == 2,
    do.call(pmax, c(.SD, na.rm = TRUE)),
    NA_real_
  ), 
  .SDcols = c("channel_code", "channel_parent_code")
]
# relocate vars related to the channel of delivery
data_channel.code_unique <- as_tibble(data_channel.code_unique) |> 
  relocate(c(channel_parent_code, channel_code, channel_code_unique, channel_name, channel_reported_name), 
           .after = sector_name)

setDT(data_channel.code_unique)

rm(data_channel.channel_parent_code)
```

Also, create a variable `channel_level` to specify the level of the most disaggregated channel available.

```{r channel_level}

# create new variable
data_channel.channel_level <- copy(data_channel.code_unique)
data_channel.channel_level <- data_channel.channel_level |> 
  fmutate(channel_level = case_when(
    str_sub(channel_code_unique, -3) == "0000" | channel_code_unique == 51000 ~ 1,
    str_sub(channel_code_unique, -3) == "000" ~ 2,
    str_sub(channel_code_unique, -1) != 0 ~ 3,
  )) |> 
  relocate(channel_level, .before = channel_parent_code)

data_channel <- copy(data_channel.channel_level)
rm(data_channel.code_unique, data_channel.channel_level)
```

### Time consistency

The channel of delivery became an *optional* reporting item on the new CRS++ reporting scheme in 2004 ([@dietrich2013]).

Information on delivery channels has been added and updated over time. Similarly, new implementing agencies have also been added, while others have seen there name and/or channel code revised. So implementing agencies may be coded and/or described differently across time and space within the dataset.

For consistency, I apply the latest code and name list provided by the OECD (last updated in July 2023)[^1].

[^1]: The Excel file can be found [here](https://www.oecd.org/dac/financing-sustainable-development/development-finance-standards/dacandcrscodelists.htm).

```{r delivery_crs_code}

# import info from the crs code list
delivery_crs_code <- data.table(read_xlsx(here("docs", "OECD-ODA-Single-Table-2024-for-2023-flows.xlsx"),
  sheet = "January 2024 table",
  skip = 6
) |>
  clean_names() |>
  mutate_if(is.character, 
    .funs = ~ str_squish(str_to_title(.))
  )) |>
  select(channel_parent_code_2024 = channel_parent_category, 
         channel_code_2024 = channel_id, 
         channel_name_2024 = full_name_english)

# merge w/ data set
data_channel.delivery_crs_code <- left_join(data_channel, delivery_crs_code,
                           by = c('channel_code_unique' = 'channel_code_2024')) |>
  relocate(channel_parent_code_2024, .after = channel_parent_code) |> 
  relocate(channel_name_2024, .after = channel_name)

```

## Typology

```{r vars bi_multi}
data_channel <- copy(data_channel.delivery_crs_code)
rm(data_channel.delivery_crs_code)

data_channel <- data_channel |> 
  fmutate( # new provider variable bilateral/multilateral/private sector
    bi_multi = case_when(
      bi_multi %in% c(1, 2, 3, 7, 8) ~ 'Bilateral',
      bi_multi == 4 ~ 'Multilateral',
      bi_multi == 6 ~ 'Private Sector'
    )
  ) 
```

```{r vars agency_size}

data_channel <- data_channel |> 
  fgroup_by(donor_name, agency_name, year) |> 
  fmutate( # new agency var: proxy size w/ the sum of commitments per year
    agency_size = sum(usd_commitment_defl, na.rm = T)
  ) |> 
  ungroup()
```

```{r vars donor_agency}

data_channel <- data_channel |> 
  fmutate( # new variable combining donor and extending agency
    donor_agency = paste0(donor_name," - ", agency_name))
```

```{r vars channel_bypass}

data_channel <- data_channel |> 
  fmutate(
    channel_nonstate = fct(as.character((if_else(channel_parent_code_2024 %in% c(20000:63000), 1, 0)))),
    channel_nonstate_ngo = fct(as.character((if_else(channel_parent_code_2024 %in% c(20000:23000), 1, 0)))),
    channel_nonstate_multi = fct(as.character((if_else(channel_parent_code_2024 %in% c(40000:47000), 1, 0)))),
    channel_nonstate_private = fct(as.character((if_else(channel_parent_code_2024 %in% c(60000:63000), 1, 0)))),
    channel_other = fct(as.character((if_else(channel_parent_code_2024 == 90000, 1, 0))))
  ) |> 
  relocate(channel_nonstate:channel_other, .after = channel_name_2024)

```

```{r vars coop_modalities}

data_channel <- data_channel |> 
  fmutate(flow_modality = fct(case_when(
    aid_t %in% c('A01', 'A02') ~ "Budget support",
    aid_t %in% c('B01') ~ "Core contributions",
    aid_t %in% c('B03', 'B031', 'B032', 'B033') ~ "Contributions to specific-purpose programmes/funds",
    aid_t %in% c('B04') ~ "Basket funds/pooled funding",
    aid_t %in% c('C01') ~ "Project-type interventions",
    aid_t %in% c('D01') ~ "Donor country personnel",
    aid_t %in% c('D02') ~ "Other technical assistance",
  ))) |> 
  relocate(flow_modality, .after = aid_t)
```

# Projects

```{r}

# create variable for the number of distinct projects by donor-recipient-sector-year unit
data_channel[, n_projects := uniqueN(crs_id), by = .(donor_id, recipient_id, sector_id)]
```

# Cohorts

```{r}
## define cohorts
# donors
cohort_donor_year <- data_channel |> 
  fgroup_by(donor_id) |> 
  fsummarize(cohort_donor = min(year, na.rm = T)) |> 
  ungroup()
  
# recipients
cohort_recipient_year <- data_channel |> 
  fgroup_by(recipient_id) |> 
  fsummarize(cohort_recipient = min(year, na.rm = T)) |> 
  ungroup()

## merge
data_channel <- merge(data_channel, cohort_donor_year, by = "donor_id") |> 
  relocate(cohort_donor, .after = donor_name)
data_channel <- merge(data_channel, cohort_recipient_year, by = "recipient_id") |> 
  relocate(cohort_recipient, .after = recipient_name)

## create dummy for "true" zeroes
# i.e, no flow btw two actors even though both are registered in the CRS database
data_channel[, dummy_universe := ifelse(year >= cohort_donor & year >= cohort_recipient, 1, 0)]
```

# Save

```{r}
setDT(data_channel)
save(data_channel, delivery_crs_code, 
     file = here("data", "data_oecd_crs_clean.RData"))
```

> To be completed (cleaning of values in channel variables)...
